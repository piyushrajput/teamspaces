<mx:VBox styleName="VBoxContentAll" 
    xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:salesforce="com.salesforce.*"
	xmlns:view="com.salesforce.gantt.view.*"
	creationComplete="init();" verticalGap="0"
	mouseUp="if(barChart.isMouseDown){barChart.isMouseDown=false;barChart.showObjectDraging();}">
	
	<mx:Style>
	.scrollBar {
	   cornerRadius: 9;
	   highlightAlphas: 0, 0;
	   fillAlphas: 0.6, 0.39, 0.82, 0.65;
	   fillColors: #000000, #333333, #999999, #cccccc;
	   trackColors: #d9ddde, #ffffff;
	   themeColor: #666666;
	   borderColor: #000000;
	   
	}	
	</mx:Style>	
	<mx:Script>
		<![CDATA[
			
		import mx.events.CalendarLayoutChangeEvent;
		import com.salesforce.gantt.model.Schedule;
		import com.salesforce.gantt.model.UI;
		import com.salesforce.gantt.model.Task;
		import mx.rpc.events.AbstractEvent;
		import com.salesforce.gantt.model.Calendar;
		import com.salesforce.gantt.model.Dependency;
		import com.salesforce.gantt.model.Dependency;
	 	import mx.events.ResizeEvent;
		import mx.containers.TitleWindow;
		import mx.managers.PopUpManager;
		import com.salesforce.gantt.controller.Constants;
		import com.salesforce.gantt.view.components.DragHorizontal;
		import com.salesforce.gantt.model.UiTask;
		import com.salesforce.gantt.controller.Components;		
		import flash.events.Event;
		import mx.containers.Panel;
		import mx.collections.ArrayCollection;
		import mx.controls.Alert; 
		import mx.controls.Button;
		
		/**
		 * User Permissions 
		 * */
		import com.salesforce.gantt.model.UserProfile;
		import com.salesforce.gantt.controller.UserPermissions;
		
		[Bindable]
		private var userProfile : UserProfile;
		
		[Bindable]
		private var tasks : ArrayCollection = Components.instance.tasks.allTasks;
		[Bindable]
		private var selectedTask : UiTask = Components.instance.tasks.selectedTask;

		/**
		* Loader img
		*/
		[Embed(source="imgs/swirl.swf")]
		public var loading_image : Class;
		
		/**
		* Timescale Buttons
		*/
	    [Embed(source="imgs/show_day_off.gif")]
	    private var day_off : Class;
	    [Embed(source="imgs/show_day_on.gif")]
	    private var day_on : Class;	     

	    [Embed(source="imgs/show_week_off.gif")]
	    private var week_off : Class;
	    [Embed(source="imgs/show_week_on.gif")]
	    private var week_on : Class;	     

	    [Embed(source="imgs/show_month_off.gif")]
	    private var month_off : Class;
	    [Embed(source="imgs/show_month_on.gif")]
	    private var month_on : Class;	     
	     
	    [Embed(source="imgs/show_year_off.gif")]
	    private var year_off : Class;
	    [Embed(source="imgs/show_year_on.gif")]
	    private var year_on : Class;	
	    
	    /**
	    * Top Operation Buttons [Disabled now]
	    * Cut / Copy / Paste / Print
	    */
	    [Embed(source="imgs/copy.png")]
	    private var copy_btn : Class;

	    [Embed(source="imgs/copy_onclick.png")]
	    private var copy_btn_click : Class;

	    [Embed(source="imgs/cut.png")]
	    private var cut_btn : Class;

	    [Embed(source="imgs/cut_onclick.png")]
	    private var cut_btn_click : Class;

	    [Embed(source="imgs/paste.png")]
	    private var paste_btn : Class;

	    [Embed(source="imgs/paste_onclick.png")]
	    private var paste_btn_click : Class;

	    [Embed(source="imgs/redo.png")]
	    private var redo_btn : Class;

	    [Embed(source="imgs/redo_onclick.png")]
	    private var redo_btn_click : Class;	    

	    [Embed(source="imgs/undo.png")]
	    private var undo_btn : Class;

	    [Embed(source="imgs/undo_onclick.png")]
	    private var undo_btn_click : Class;	    

	    [Embed(source="imgs/print.png")]
	    private var print_btn : Class;

	    [Embed(source="imgs/print_onclick.png")]
	    private var print_btn_click : Class;
	    
	    /**
	    * Box Borders / Drag Handlers
	    */
	    [Embed(source="imgs/arrow_divide_box_left.png")]
	    private var arrow_divide_box_left : Class;

	    [Embed(source="imgs/arrow_divide_box_right.png")]
	    private var arrow_divide_box_right : Class;	

	    [Embed(source="imgs/arrow_divide_box_bottom.png")]
	    private var arrow_divide_box_bottom : Class;

	    [Embed(source="imgs/arrow_divide_box_top.png")]
	    private var arrow_divide_box_top : Class;	
		
		/**
		 *	Key Down Handling 
		 * */		 
		 public function keyPressed(event : KeyboardEvent): void {
		 	trace('The keyCode : '+ event.keyCode);
		 	
		 	if(event.keyCode == 46 && taskList.isTyping == false && selectedTask.id != ''){
		 		//taskList.deleteTask(selectedTask);		 		
		 		if(userProfilePermissions.canManage) {
		 			showDeleteDialog();	
		 		}
		 	}	 	
		 }
		 
		 /**
		 * User Permissions
		 * */
		 
		 public var userProfilePermissions : UserProfile = new UserProfile(false,false);	
		 public var up : UserPermissions = new UserPermissions(); 
		 
		 public function genUserPermissions(event) : void 
		 {		 	
		 	userProfilePermissions = new UserProfile(up.getCanCreate(),up.getCanManage());	
		 	trace('The user can manage:'+userProfilePermissions.canManage+'The user can create:'+userProfilePermissions.canCreate);		 	
		 	setUiSharing(event);	 	
		 }
		 
		 /**
		 * Set Ui sharing if user can manage the project
		 * */    
	    public function setUiSharing(event) {
 			//Hide buttons if necessary on first load
 			if(!userProfilePermissions.canManage){
					managerControls.visible = false;
					taskList.taskListAdvancedDataGrid.dragEnabled = false;				
					taskList.taskListAdvancedDataGrid.dropEnabled = false;				
			}
		}
		
		/**
		*	Overlay Tabs
		*/
	    
	    [Embed(source="imgs/white_tab.png")]
	    private var overlay_selected_tab : Class;	

	    [Embed(source="imgs/gray_tab.png")]
	    private var overlay_tab : Class;

	    
	    /**
	    * The Horizontal (Navigator tab header images)
	    *
	    */
	    [Embed(source="imgs/tab_horizontal_title_navigator_expand.png")]
	    private var navigator_tab_expand : Class;
	    [Embed(source="imgs/tab_horizontal_title_navigator_collapse.png")]
	    private var navigator_tab_collapse : Class;
	    
	    /**
	    * The Vertical (Tasks tab header images)
	    *
	    */
	    [Embed(source="imgs/tab_vertical_title_tasks_expand.png")]
	    private var tasks_tab_expand : Class;
	    [Embed(source="imgs/tab_vertical_title_tasks_collapse.png")]
	    private var tasks_tab_collapse : Class;
	    
	    private var none : Class;  
	    /* 
	    * Asigna las imagenes(disabled o no) para cada boton de la escala 
	    */
	     public function toggleButtons(value : String) : void
	     {
			day_button.source = day_on;
			week_button.source = week_on;			
			month_button.source = month_on;
			year_button.source = year_on;
	     	switch (value) 
	     	{
	     		case "day":
	     			day_button.source = day_off;
	     			break;
	     		case "week":
	     			week_button.source = week_off;
	     			break;
	     		case "month":
	     			month_button.source = month_off;
	     			break;
	     		case "year":
	     			year_button.source = year_off;
	     			break;
	     	}
	    }		       
	    
	
	    
     	/*
     	* Es llamada al  inicio del sistema para asignar los observadores de los eventos
     	* incluyendo tambien los eventos de cuando se cargan todos los datos de la base de datos
     	* al inicio
     	*/
		private function init() : void 
		{
			//Global key Events
			this.addEventListener(KeyboardEvent.KEY_DOWN, keyPressed);
			
			//taskResources events			
			taskResources.addEventListener(Constants.ADD_TASK_RESOURCES, showAvailableResources);
			taskResources.addEventListener(Constants.TASKS_FILTERS, filter);
			
			//taskList events
			taskList.addEventListener(Constants.ADD_DEPENDENCY, showDependencies);
			taskList.addEventListener(Constants.ADD_TASK_RESOURCES, showAvailableResources);
			taskList.addEventListener(Constants.TASK_SELECT, selectTask);
			taskList.addEventListener(Constants.TASKS_FILTERS, filter);
			taskList.addEventListener(Constants.TASK_CENTER, centerTask);
			
			//editTaskPanel events			
			editTaskPanel.addEventListener(Constants.ADD_DEPENDENCY, showDependencies);
			editTaskPanel.addEventListener(Constants.TASK_SELECT, selectTask);
			editTaskPanel.addEventListener(Constants.TASKS_FILTERS, filter);
			editTaskPanel.addEventListener(Constants.TASK_CENTER, centerTask);
			
			//barChart events
			barChart.addEventListener(Constants.TASK_SELECT, selectTask);
			barChart.addEventListener(Constants.TASKS_FILTERS, filter);
			
			//dragHorizontal events			
			var dragHorizontal : DragHorizontal = new DragHorizontal(canvasContentAll, dragPanelTasks, rbComp, systemManager, Constants.RIGHT);
			addEventListener(dragHorizontal.MOVE_LEFT, dragHorizontal.resizeHandler);
			
			//dragHorizontalEdit events			
			var dragHorizontalEdit : DragHorizontal = new DragHorizontal(canvasContentAll, editPanel, rbComp, systemManager, Constants.LEFT);
			addEventListener(dragHorizontalEdit.MOVE_RIGHT, dragHorizontalEdit.resizeHandler2);
			
			Components.instance.salesforceService.userPermissionsOperation.addEventListener(Constants.LOADING_END, genUserPermissions)
			Components.instance.salesforceService.taskOperation.addEventListener(Constants.LOADING_END, eventLoadingEnd);
			Components.instance.salesforceService.taskOperation.addEventListener(Constants.REFRESHDATES, endLoad);
			Components.instance.salesforceService.dependencyOperation.addEventListener(Constants.REFRESHDATES, endLoad);
			Components.instance.salesforceService.dependencyOperation.addEventListener(Constants.LOADING_END, eventLoadingEnd);
			
			//event for close progress bar
			visibilityLoadingProgress(true);			
		}
		/*
		 * Llamada luego de cargar todo de la base de datos para inicializar los controles
		 */
		private function endLoad(event : Event) : void
		{
			// Gen user permissions
			up.genUserPermissions();			
			
			if(tasks.length>0)// && !isEmptyName())
			{
				dragPanelTasks.width = Constants.GRID_PANEL_MIN_WIDTH;
				contentBarChartOverview.height = 150;
			}
			
	
			buttonsBars.visible = true;
			if(Components.instance.ganttState!=null)
			{
				UI.scale = (this.parentApplication.width - 30) / Components.instance.ganttState.scale;
			}
			
			// center the Gantt TODAY 
			// Brx
			var todayDate : Date = new Date();			
			barChart.moveBarChartHorizontally(-((Components.instance.calendar.toDay(todayDate) * UI.scale)-(barChart.width/2)));
			
			barChart.updateDates(true);
			taskList.filter();
			barChartOverview.setMaskProperties();
			barChartOverview.loadDates();
			
			// Initialize variables
			editTaskPanel.fillPercentArray();
			taskResources.fillPercentArray();		
			
			labelTimeline.text = 'Timeline ' + Components.instance.tasks.teamSpaceName;
			
					
		} 
	  	/*
	    * Muestra la lista de recursos.
	    * Es llamada cuando se dispara un evento en el link [add] de TaskResources.
	    */
		private function showAvailableResources(event:Event):void {
			
			if(selectedTask.id != '')
			{
				var windowAvailableResources : AvailableResources = AvailableResources( PopUpManager.createPopUp(this, AvailableResources, true));
				windowAvailableResources.selectedTask = selectedTask; 
				windowAvailableResources.setAvailableResources();
				windowAvailableResources.addEventListener(Constants.TASKS_FILTERS, filter);				
				PopUpManager.centerPopUp(TitleWindow(windowAvailableResources));
			}
		}
		/*
	    * Muestra el formulario de asignar dependencias.
	    * Es llamada cuando se dispara un evento de TaskList.
	    */
	    public var windowDependencies : Dependencies;
		private function showDependencies(event:Event) : void
		{
			if(selectedTask.id != '')
			{
				var i : int;
				var dependency : Dependency;
				windowDependencies = Dependencies( PopUpManager.createPopUp(this, Dependencies, true));
				windowDependencies.tasks = tasks;
			    var selectedTaskDependencies : ArrayCollection = new ArrayCollection(); //= selectedTask.dependencies;
				for (i = 0;i < selectedTask.dependencies.length;i++)
				{
					dependency = ((Dependency)(selectedTask.dependencies.getItemAt(i,0.0)));
					if(dependency.task != null)
					{
						selectedTaskDependencies.addItem(dependency);
					}
				}
				windowDependencies.selectedTask = selectedTask;
				windowDependencies.selectedTaskDependencies = selectedTask.dependencies;
				windowDependencies.selectedTaskDependenciesUpdated = selectedTaskDependencies;
				windowDependencies.setParentTasks();
				windowDependencies.addEventListener(Constants.TASKS_FILTERS, filter);
				windowDependencies.addEventListener(Constants.TASK_SELECT, selectTask);
				windowDependencies.parentGrid.setFocus();
				PopUpManager.centerPopUp(TitleWindow(windowDependencies));
			}
		}
		
		public var canModifySelectedTask = false;
		
		/*
		* Esta funcion es disparada cuando se selecciona una tarea
		* Edit Task 
		*/
		public function selectTask(event : Event = null) : void
		{
			editTaskPanel.loadSelectedTask();
			//barChart.drawBorderSelected(taskList.getVisibleTask(Components.instance.tasks.selectedTask.id));
			taskResources.buildTempResources();
			barChart.paintSelect(taskList.getVisibleTask(Components.instance.tasks.selectedTask.id));
			taskList.clearWritingText();
			trace('The selected task user :'+Components.instance.tasks.selectedTask.createdBy.id+' The selected session user: '+Components.instance.session.user.id);
			// Check if the user are the creator of the task, or manager.
			if(Components.instance.tasks.selectedTask.createdBy.id == Components.instance.session.user.id){
					managerControls.visible = true;
					taskList.taskListAdvancedDataGrid.dragEnabled = true;				
					taskList.taskListAdvancedDataGrid.dropEnabled = true;
					canModifySelectedTask = true;				
			} else {
				if(!userProfilePermissions.canManage){
					managerControls.visible = false;
					taskList.taskListAdvancedDataGrid.dragEnabled = false;				
					taskList.taskListAdvancedDataGrid.dropEnabled = false;
					canModifySelectedTask = false;
				}
			}
			
			
		}
		
		/*
	    * Centra la tarea en el gantt gilla
	    */
		public function centerTask(event : Event = null) : void
		{
			barChart.centerSelected(dragPanelTasks.width, editPanel.width, editPanel.x);
			barChartOverview.setMaskProperties();
		}
		/*
	    * Actualiza gilla
	    */
		public function filter(event : Event = null) : void 
		{
			if(tasks.length>0)
			{
				Components.instance.tasks.refreshDates();//actualiza fecha fin y fecha inicio del gantt
				barChart.updateDates(false);
			}	
			barChartOverview.loadDates();
			taskList.filter();
			barChart.refreshGrid();
			if(tasks.length>0)
			{
				barChartOverview.setMaskProperties();
			}
			taskList.showDate();
		}	
		/*
		* Asigna posicion del panel de detalles flotante
		*/
		public function statusTaskPreview(task : UiTask, x : int, y : int, visible : Boolean) : void
		{
			if(dragPanelTasks.width <= 10)
			{
				if(task != null)
				{
					taskPreview.overTask = UiTask(task.clone());
					dragPanelTaskPreview.x = x;
					dragPanelTaskPreview.y = y;
				}
				dragPanelTaskPreview.visible = visible;
			}
		}
		
	
		/*
		* Impreime la grilla y el gantt
		*/
		private function print() : void
		{
			taskList.doPrint();
			barChart.doPrint();
			
		}
		/**
		* Muestra u oculta el overview pane
		*/
		private function showHideOverView() : void
		{
			if(contentBarChartOverview.height==150)
			{
				barChartOverview.visible=false;
				contentBarChartOverview.height = 24;
			}
			else
			{
				contentBarChartOverview.height = 150;
				barChartOverview.visible=true;
			}
		}
		/**
		* Muestra u oculta el overview pane
		*/
		private function showHideTaskGrid(): void
		{
			if(dragPanelTasks.width<927)
			{
				dragPanelTasks.width = 927;
			}
			else
			{
				dragPanelTasks.width = 27;
			}
		}
		/*
		* Muestra u oculta los tres paneles(taskList, taskDetails, overview)
		*/
		private function resizeDragPanel(panel : String, image : Image) : void
		{
			switch (panel)
			{
				case 'editPanel':
					barChart.moveArrows();
					if(editPanel.width==Constants.DETAILS_PANEL_MIN_WIDTH)
					{
						image.source = arrow_divide_box_left;
					}
					else
					{
						image.source = arrow_divide_box_right;
					}
					break;
				case 'dragPanelTasks':
					canvasList.width=dragPanelTasks.width-Constants.GRID_PANEL_MIN_WIDTH;
					if(dragPanelTasks.width!=Constants.GRID_PANEL_MIN_WIDTH)
					{
						taskList.moveGrid(barChart.bars.rowHeight, - barChart.barChartCanvas.y);
					}
					if(dragPanelTasks.width==Constants.GRID_PANEL_MAX_WIDTH)
					{
						image.source = tasks_tab_collapse;
					}
					else
					{
						image.source = tasks_tab_expand;
					}
					barChart.moveArrows();
					break;
					
				/* this case rename the image of the handler at the overview (Navigator Tab).	*/
				case 'contentBarChartOverview':
					if(contentBarChartOverview.height==24)
					{
						image.source = navigator_tab_expand;
					}
					else
					{
						image.source = navigator_tab_collapse;
					}
					break;
				
			}
		}
		/**
		 * Muestra el panel correspondiente
		 * */
		public function showPanel(panel : String) : void
		{
			switch (panel)
			{
				case 'editPanel':
					editPanel.width=Constants.DETAILS_PANEL_MAX_WIDTH;
					break;
				case 'dragPanelTasks':
					break;
				case 'contentBarChartOverview':
					break;	
			}
		}
		/**
		 * Oculta el panel correspondiente
		 * */
		public function hidePanel(panel : String) : void
		{
			switch (panel)
			{
				case 'editPanel':
					editPanel.width=Constants.DETAILS_PANEL_MIN_WIDTH;
					break;
				case 'dragPanelTasks':
					break;
				case 'contentBarChartOverview':
					break;	
			}
		}
		
		/**
		* Hide the progress bar
		*/
		public function eventLoadingEnd(event : Event) : void
		{
			visibilityLoadingProgress(false);
			
		}
		/**
		* Shows the progress bar
		*/
		public function visibilityLoadingProgress(visibility : Boolean) : void
		{
			dragProgress.visible = visibility;
			if(!visibility && taskList.hasCreating)
			{
				taskList.insertTaskName();
			}
		}
		
		/**
		* Redirect to the team Detail
		*/
		private function loadTeamDetail():void {
			navigateToURL(new URLRequest('TeamsRedirect?id='+editTaskPanel.schedule.team),'_self');
		}
		
		/**
		* Paste a task
		*/		
		private function paste():void 
		{
			if(Components.instance.tasks.clipBoardTasks.length>0)
			{
				visibilityLoadingProgress(true);
				Components.instance.controller.paste();
			
				var clipboardTask : Task = Task(Components.instance.tasks.allTasks.getItemAt(Components.instance.tasks.selectedTask.position - 1));
				var taskInArray : Task = Components.instance.tasks.getTask(clipboardTask.id);
				barChart.drawBorderSelected(taskInArray);
			
				Components.instance.tasks.clipBoardTasks.removeAll();
				taskList.filter();
			}
		}

		/**
		* Modal pop up to  / add a Task
		*/

		import mx.events.CloseEvent;
        import mx.managers.PopUpManager;
        
        public var openAssigneesTab : Boolean = false;
		
		public function editTaskOverlay ():void
		{
			editTaskPanel.loadSelectedTask();
			if(selectedTask.id != ''){
				if(!openAssigneesTab){
					
					taskResources.rebuildAssignees();							
					
					tabbedOverlay.width =470;
			     	tabbedOverlayGrid.width = 470;
			     	PopUpManager.addPopUp (tabbedOverlay, this, true);				
			     	PopUpManager.centerPopUp(tabbedOverlay);
			     	
			     	editTaskPanelWrapper.visible = true;		     	
					addAsigneesPanelWrapper.visible = false;
					addAsigneesPanelWrapper.width = 0;
				} else {
	
					taskResources.rebuildAssignees();
					editTaskPanelWrapper.visible = false;
				
					taskResources.tempTaskResources.refresh();
					taskResources.availableResources.refresh();
													
					task_asignees_tab.setStyle("backgroundImage", overlay_selected_tab);
					task_details_tab.setStyle("backgroundImage", overlay_tab);
					task_links_tab.setStyle("backgroundImage", overlay_tab);
					
					addAsigneesPanelWrapper.width = 470;
					editTaskPanelWrapper.width = 0;										
					addAsigneesPanelWrapper.visible = true;
					currentOverlayTab = 'asignees';
					
					PopUpManager.addPopUp (tabbedOverlay, this, true);				
			     	PopUpManager.centerPopUp(tabbedOverlay);
					
					openAssigneesTab = false;
				}							 
			} else {
				Alert.show('Please select a task to edit');	 
			}
		}
		
		public function closeEditTaskOverlay(): void
		{			
			PopUpManager.removePopUp(tabbedOverlay);				
			// rebuild the overlay to the next load
			addAsigneesPanelWrapper.visible = false;
			task_asignees_tab.setStyle("backgroundImage", overlay_tab);
			task_details_tab.setStyle("backgroundImage", overlay_selected_tab);
			task_links_tab.setStyle("backgroundImage", overlay_tab);				 
			addAsigneesPanelWrapper.width = 0;
			editTaskPanelWrapper.width = 470;
			editTaskPanelWrapper.visible = true;
			currentOverlayTab = 'taskdetails';	
				
		}			
		
		/*
		[Embed(source="imgs/white_tab.png")]
	    private var overlay_selected_tab : Class;	

	    [Embed(source="imgs/gray_tab.png")]
		
		 */
		
		/**
		* Save Task for All Tabs in Overlay
		* Unifies methods for Save in all tab 
		*/
		public function SaveTask(): void 
		{
			taskResources.saveTaskResources();
			dependencies.saveDependencies();
			editTaskPanel.saveTaskChanges();	
		}
		
		
		/**
		* Tab Changes at the overlay
		*/
		
		private var currentOverlayTab : String = '';
		
		public  function showTabContent(tabName : String):void
		{
			if(currentOverlayTab != tabName){
				switch (tabName) {
					case 'asignees':	
						
						// Hide the other overlay sections					
						editTaskPanelWrapper.visible = false;
						taskLinksPanelWrapper.visible = false;
						
						// Refresh the arrays binded 
						taskResources.tempTaskResources.refresh();
						taskResources.availableResources.refresh();
						
						// Set the active tab 
						task_asignees_tab.setStyle("backgroundImage", overlay_selected_tab);
						task_details_tab.setStyle("backgroundImage", overlay_tab);
						task_links_tab.setStyle("backgroundImage", overlay_tab);
						
						// Expand the current panel
						addAsigneesPanelWrapper.width = 470;
						
						// Set the other panels width
						editTaskPanelWrapper.width = 0;
						taskLinksPanelWrapper.width = 0;										
						
						// Show the selected section and set the current state
						addAsigneesPanelWrapper.visible = true;
						currentOverlayTab = 'asignees';					
					break;
					case 'taskdetails':
					
						addAsigneesPanelWrapper.visible = false;
						taskLinksPanelWrapper.visible = false;
					
						task_asignees_tab.setStyle("backgroundImage", overlay_tab);
						task_details_tab.setStyle("backgroundImage", overlay_selected_tab);
						task_links_tab.setStyle("backgroundImage", overlay_tab);
					 
					 	taskLinksPanelWrapper.width = 0;
						addAsigneesPanelWrapper.width = 0;
						editTaskPanelWrapper.width = 470;
					
						editTaskPanelWrapper.visible = true;
						currentOverlayTab = 'taskdetails';
					break;
					case 'tasklinks':
						
						currentOverlayTab = 'tasklinks';
						addAsigneesPanelWrapper.visible = false;
						editTaskPanelWrapper.visible = false;
						
						task_asignees_tab.setStyle("backgroundImage", overlay_tab);
						task_details_tab.setStyle("backgroundImage",overlay_tab );
						task_links_tab.setStyle("backgroundImage", overlay_selected_tab);
						
						dependencies.buildDependencies();
						
						addAsigneesPanelWrapper.width = 0;
						editTaskPanelWrapper.width = 0;
						taskLinksPanelWrapper.width = 470;
						
						taskLinksPanelWrapper.visible = true;
						currentOverlayTab = 'tasklinks';
					break;
				}
			}
		}
		
		/**
		 * Delete Dialog
		 * */
		
		public function showDeleteDialog() : void {			
			PopUpManager.addPopUp (deleteDialog, this, true);				
			PopUpManager.centerPopUp(deleteDialog);
		}
		
		public function closeDeleteDialog() : void {
			PopUpManager.removePopUp(deleteDialog);
		}
		
		public function deleteSelectedTask() : void {
			barChart.setTasksDeleted(selectedTask);
			PopUpManager.removePopUp(deleteDialog);
		}
		
		]]>
</mx:Script>
<mx:Style source="css/MainView.css"/>		
	
<mx:HBox styleName="canvasTitleTopBorder" width="100%" height="0" paddingBottom="2" horizontalScrollBarStyleName="scrollBar" verticalScrollBarStyleName="
scrollBar"/>
<!--  
		Top Canvas , contains buttons and Title	
 -->
<mx:Canvas height="36" width="100%" styleName="canvasTitle" mouseOver="barChart.defaultCursor()" x="0" y="0" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	<!-- Title label -->
	<mx:HBox left="10" height="30" useHandCursor="true" >
 		<mx:Label id="labelTimeline" styleName="labelTitle" width="100%" height="35"  click="loadTeamDetail();" useHandCursor="true" buttonMode="true"  mouseChildren="false"/> 		
 	</mx:HBox>
 	<!-- 
 			Middle Buttons Container
 			Task Operations
 	 -->
 	<mx:HBox left="300" height="20"  > 
	 	<mx:Grid horizontalGap="5" id="managerControls">
				<mx:GridRow>
					<mx:GridItem>
						<mx:Script>
					        <![CDATA[
					            /**
					            * This fills the dropdown menu of the new task button 
					            */
					            import mx.collections.ArrayCollection;
								
					            [Bindable]
					            public var newtaskOpts:ArrayCollection = new ArrayCollection(
					                [  	{label:"Insert task above", data:1}, 
					                  	{label:"Insert task below", data:2}, 
					                  	{label:"Create a sub task", data:3} ]);
					            
					            private function resetPrompt():void {					            						            	
					            	newTaskDropDown.selectedIndex = -1;
					            }     
					        ]]>
					    </mx:Script>
					    <mx:ComboBox 
					    	id="newTaskDropDown"
					    	dataProvider="{newtaskOpts}"
					    	change="resetPrompt()"
					    	upSkin="@Embed(source='imgs/new_btn.png')"
					    	downSkin="@Embed(source='imgs/new_btn.png')"
					    	overSkin="@Embed(source='imgs/new_btn.png')"
					    	dropdownBorderColor="#000000"
					    	width="56" dropdownWidth="200"
					    	prompt=""
					    	height="19"
					    	selectionColor="0xFFFFFF"
					    	rollOverColor="0xF9F8CD"/>	
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image styleName="topDateButtons" id="edit_button" source="@Embed(source='imgs/edit_btn.png')" useHandCursor="true"  click="editTaskOverlay();" buttonMode="true" /> 
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image styleName="topDateButtons" id="delete_button" source="@Embed(source='imgs/delete_btn.png')" useHandCursor="true" click="taskList.deleteTask(selectedTask)" buttonMode="true"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image styleName="topDateButtons" id="indent_button" source="@Embed(source='imgs/indent_btn.png')" useHandCursor="true" click="taskList.updateTask(selectedTask, event, 'right')"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:Image styleName="topDateButtons" id="outdent_button" source="@Embed(source='imgs/outdent_btn.png')" useHandCursor="true" click="taskList.updateTask(selectedTask, event, 'left')"/>
					</mx:GridItem> 						 						
 				</mx:GridRow>
 		</mx:Grid>		
	</mx:HBox>
	<!-- 
			Time Scale Buttons
			Months / Days / Weeks / Years 
	-->
	<mx:HBox id="buttonsBars" visible="false" right="6" height="25"  verticalAlign="top">
		<mx:Grid horizontalGap="0">
			<mx:GridRow>
	    		<mx:GridItem>
	   				<mx:Image styleName="topDateButtons" id="day_button" source="@Embed(source='imgs/show_day_on.gif')"   click="barChart.changeZoom(1);toggleButtons('day')"  useHandCursor="true"/> 				
	    		</mx:GridItem>
	    		<mx:GridItem>
	    			<mx:Image styleName="topDateButtons" id="week_button"  source="@Embed(source='imgs/show_week_on.gif')"   click="barChart.changeZoom(7);toggleButtons('week')" useHandCursor="true"/>
	    		</mx:GridItem>
	    		<mx:GridItem>
					<mx:Image id="month_button" source="@Embed(source='imgs/show_month_off.gif')"  click="barChart.changeZoom(30);toggleButtons('month')" useHandCursor="true"/>		    				
	    		</mx:GridItem>
	    		<mx:GridItem>
					<mx:Image id="year_button"   source="@Embed(source='imgs/show_year_on.gif')"  click="barChart.changeZoom(365);toggleButtons('year')" useHandCursor="true"/>		    				
	    		</mx:GridItem>
	    	</mx:GridRow>	
	    </mx:Grid>
	</mx:HBox>
</mx:Canvas>
<!--  
		Middle Canvas , contains gantt chart and tasklist	
 -->
<mx:Canvas resize="barChartOverview.setMaskProperties()" height="100%" width="100%" id="canvasContentAll" y="22"
		xmlns:comp = "com.salesforce.gantt.view.components.*" horizontalScrollPolicy="off" verticalScrollPolicy="off" backgroundColor="#FFFFFF">	
		<!--  
			Gantt Bar Chart	
 		-->
		<view:BarChart selectedTask="{selectedTask}" width="100%" height="100%" id="barChart"/>		
		<!--  
			DataGrid
			Tasklist
 		-->		
		<comp:RubberBandComp id="rbComp"  height="0" width="0" visible="false" />
		<comp:DragPanel id = "dragPanelTasks" 
			resize="resizeDragPanel('dragPanelTasks',arrow_divide_box_tasklist);"
			horizontalScrollPolicy="off"
			verticalScrollPolicy="off"
			height="100%" 
			width="927"  
			headerHeight="0"
			backgroundAlpha=".0"
			dropShadowEnabled="false"
			alpha="1"
			styleName = "dragPanelTaskList"
			horizontalScrollBarStyleName="scrollBar" 
			verticalScrollBarStyleName="scrollBar">
		<mx:HBox id="hboxDragPanelTasks"  height="100%" width="100%" horizontalGap="0" verticalGap="0"  horizontalScrollBarStyleName="scrollBar" verticalScrollBarStyleName="scrollBar">
			<mx:Canvas id="canvasList" autoLayout="true"  height="100%" width="100%" left="0" top="0">
				<view:TaskList id="taskList" 
					selectedTask="{selectedTask}"  
					width="100%"
					height="100%"   
					left="0" 
					top="0" y="0"
					horizontalScrollPolicy="auto" horizontalScrollBarStyleName="scrollBar" verticalScrollBarStyleName="scrollBar" />
			</mx:Canvas>
			<!--	Here starts the handler and the tab of tasks -->
			<mx:Canvas autoLayout="true" height="100%" width="24" right="0" top="0" verticalScrollPolicy="off" >
				<mx:Canvas 
					height="100%" width="7" top="0" y="0" backgroundSize="100%"
					backgroundImage="@Embed(source='imgs/tab_vertical_handler.png')" 
					useHandCursor="true"  buttonMode="true" />
				<mx:Image id="arrow_divide_box_tasklist" useHandCursor="true" buttonMode="true" 
					top="15" right="0" height="55" width="18"
					source="@Embed(source='imgs/tab_vertical_title_tasks_expand.png')"  click="showHideTaskGrid()"/>
				<mx:Image useHandCursor="true" buttonMode="true" 
					top="300" left="0" 
					source="@Embed(source='imgs/tab_vertical_handler_lines.png')" />
			</mx:Canvas>
		</mx:HBox>			
	</comp:DragPanel>
	<!-- 
		Delete Dialog
		At Hidden Drag panel.
		@TODO - Move this code to another file.
	-->
	<comp:DragPanel	visible="false">		
		<mx:Canvas 
			id="deleteDialog" 
			styleName="deleteDialog"
			width="475"
			height="170"
			mouseOver="barChart.defaultCursor();">
			<mx:Grid width="475" height="170" horizontalGap="0" verticalGap="0">
				<mx:GridRow>
					<mx:GridItem height="35" width="475" verticalScrollPolicy="off" horizontalScrollPolicy="off">
						<mx:HBox  width="475" height="100%" paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2">
							<mx:Grid width="100%" height="100%" backgroundColor="0x656566">
								<mx:GridRow width="100%" height="35">
									<mx:GridItem width="50%" verticalAlign="middle" horizontalAlign="left" height="30" paddingLeft="10">
										<mx:Label color="#ffffff" text="Delete Task"  fontSize="11" fontFamily="Arial"  />								
									</mx:GridItem>
									<mx:GridItem width="50%" horizontalAlign="right" height="30" paddingTop="10" paddingRight="10" >										
										<mx:Image source="@Embed(source='imgs/close_overlay.png')" buttonMode="true"  click="closeDeleteDialog()"  useHandCursor="true"  />																				
									</mx:GridItem>
								</mx:GridRow>
							</mx:Grid>
						</mx:HBox>						
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem width="475" height="80" paddingTop="20" paddingLeft="20">
						<mx:Grid verticalGap="0" horizontalGap="0">
							<mx:GridRow width="100%">
								<mx:GridItem>
									<mx:Label color="#000000" text="Are you sure you want to continue?" fontWeight="bold"  fontSize="11" fontFamily="Arial"/>
								</mx:GridItem>
							</mx:GridRow>
							<mx:GridRow width="100%">
								<mx:GridItem>
									<mx:Label color="#000000" text="Once deleted, it is not recoverable."  fontSize="11" fontFamily="Arial" />
								</mx:GridItem>
							</mx:GridRow>
						</mx:Grid>						
					</mx:GridItem> 
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem width="475" horizontalScrollPolicy="off" verticalScrollPolicy="off" paddingLeft="2" paddingRight="2" paddingTop="10">						
						<mx:VBox  horizontalAlign="center" width="100%" paddingTop="7" horizontalScrollPolicy="off" verticalScrollPolicy="off" styleName="deleteDialogButtons">							
							<mx:Grid verticalGap="5" horizontalScrollPolicy="off" verticalScrollPolicy="off">								
								<mx:GridRow horizontalScrollPolicy="off" verticalScrollPolicy="off">
									<mx:GridItem backgroundColor="0x7D8DA2" width="135" height="27" verticalAlign="middle" horizontalAlign="center" horizontalScrollPolicy="off" verticalScrollPolicy="off">
										<mx:Label id="continueAndDeleteBtn" click="deleteSelectedTask();"  useHandCursor="true"  buttonMode="true"  mouseChildren="false" text="Continue and Delete" color="white"  fontWeight="bold" fontSize="12"  fontFamily="Arial"/>						
									</mx:GridItem>
									<mx:GridItem backgroundColor="0x999999"  width="55" height="27" verticalAlign="middle" horizontalAlign="center" horizontalScrollPolicy="off" verticalScrollPolicy="off">
										<mx:Label id="cancelDeleteBtn" click="closeDeleteDialog();" useHandCursor="true" buttonMode="true"  mouseChildren="false"  text="Cancel" color="white" fontWeight="bold" fontSize="12"  fontFamily="Arial"/>
									</mx:GridItem>
								</mx:GridRow>
							</mx:Grid>
						</mx:VBox>	
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>				
		</mx:Canvas>
	</comp:DragPanel>
	<!--  
		Drag Panel Task Details and Resources
		* Currently Not Visible 
 	-->
	<comp:DragPanel
		styleName = "dragPanelDetailsAndResources" 
		resize="resizeDragPanel('editPanel',arrow_divide_box_edit)"		
		id = "editPanel" 
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off"
		height="100%"
		width="18"
		dropShadowEnabled="false" 
		headerHeight="0"
		alpha="0"
		visible="false"	> 
		<mx:HBox width="100%" height="100%" verticalGap="0" horizontalGap="0">
				<mx:Canvas autoLayout="true" height="100%" >
					<mx:Canvas 
					height="100%" width="8" left="0" top="0" y="0" backgroundSize="100%"
					backgroundImage="@Embed(source='imgs/divide_vox_right.jpg')" 
					useHandCursor="true" buttonMode="true" />
					<mx:Image id="arrow_divide_box_edit" useHandCursor="true" buttonMode="true" 
					top="50" y="50" height="8"
					source="@Embed(source='imgs/arrow_divide_box_right.png')" />
					<mx:Image useHandCursor="true" buttonMode="true" 
					top="300" y="300" 
					source="@Embed(source='imgs/lines_divide_box_right.png')" />
				</mx:Canvas>
				<mx:VBox styleName="VBoxResourceEditTaskPanel" height="100%" width="100%">
				<!--
					This is the Overlay to edit / Add a task
					@TODO Maybe this code must be moved to another file.
				--> 
					<mx:Canvas id="tabbedOverlay" width="470" height="370" styleName="tabbedOverlay"  verticalScrollPolicy="off" horizontalScrollPolicy="off">
						 <mx:Grid verticalGap="0" horizontalGap="0" id="tabbedOverlayGrid" width="470"  verticalScrollPolicy="off" horizontalScrollPolicy="off">
						 	<mx:GridRow width="470"  backgroundColor="0x666666">
							 	<mx:GridItem  width="470" verticalAlign="bottom"  verticalScrollPolicy="off" horizontalScrollPolicy="off">
							 		<mx:Grid width="470" verticalGap="0" horizontalGap="0" height="30" verticalScrollPolicy="off" horizontalScrollPolicy="off">
							 			<mx:GridRow  borderThickness="1" borderColor="0xFFFFFF" width="470">
							 				<mx:GridItem height="25" verticalAlign="middle"  width="50%">
									 			<mx:Label text="Edit Task" color="0xFFFFFF" paddingTop="10" paddingLeft="10"/>						 			
									 		</mx:GridItem>
									 		<mx:GridItem backgroundColor="0x666666" textAlign="right"  width="50%" horizontalAlign="right" paddingTop="10" paddingRight="15">									 			
									 			<mx:Image source="@Embed(source='imgs/close_overlay.png')" buttonMode="true" click="closeEditTaskOverlay()" useHandCursor="true"  />									 			
									 		</mx:GridItem>									 			
							 			</mx:GridRow>
							 		</mx:Grid>
							 	</mx:GridItem>						 		 			
						 	</mx:GridRow>
						 	<mx:GridRow backgroundColor="0x666666"  height="25"  >
						 		<mx:GridItem verticalAlign="bottom">
						 			<mx:Grid verticalGap="0" horizontalGap="5" verticalAlign="bottom">
						 				<mx:GridRow>
						 					<mx:GridItem  width="15" height="19">
						 					</mx:GridItem>
						 					<mx:GridItem backgroundImage="@Embed(source='imgs/white_tab.png')" width="75" textAlign="center" height="19" id="task_details_tab">						 						
						 						<mx:Label text="Details" width="69" textAlign="center" click="showTabContent('taskdetails');" />
						 					</mx:GridItem>
						 					<mx:GridItem backgroundImage="@Embed(source='imgs/gray_tab.png')"  width="75" textAlign="center" height="19" id="task_links_tab">
						 						<mx:Label text="Task Links"   width="75" textAlign="center" click="showTabContent('tasklinks');"/>
						 					</mx:GridItem>
						 					<mx:GridItem  backgroundImage="@Embed(source='imgs/gray_tab.png')"  width="75" textAlign="center" height="19" id="task_asignees_tab">
						 						<mx:Label text="Assignees"   width="75" textAlign="center" click="showTabContent('asignees');"/>
						 					</mx:GridItem>
						 				</mx:GridRow>
						 			</mx:Grid>
						 		</mx:GridItem>
						 	</mx:GridRow>
						 	<mx:GridRow horizontalAlign="left">
						 		<mx:GridItem width="470" horizontalScrollPolicy="off" verticalScrollPolicy="off" horizontalAlign="left" textAlign="left">
						 			<!-- The overlay Sections -->
						 			<mx:Grid horizontalGap="0" width="100%">
						 				<mx:GridRow horizontalAlign="left">
						 					<mx:GridItem>
						 						<mx:Canvas  id="editTaskPanelWrapper"  width="470" horizontalScrollPolicy="off" verticalScrollPolicy="off" visible="false">						 				
									 				<view:EditTaskPanel width="470" id="editTaskPanel"  horizontalScrollPolicy="off" verticalScrollPolicy="off"   />
									 			</mx:Canvas>			
						 					</mx:GridItem>
						 					<mx:GridItem>
						 						<mx:Canvas  id="taskLinksPanelWrapper" width="470"  horizontalScrollPolicy="off" verticalScrollPolicy="off" visible="false">						 								 			
									 				<view:Dependencies width="470" selectedTask="{selectedTask}" id="dependencies"  horizontalScrollPolicy="off" verticalScrollPolicy="off"  />						 			
									 			</mx:Canvas>			
						 					</mx:GridItem>
						 					<mx:GridItem>
						 						<mx:Canvas  id="addAsigneesPanelWrapper" width="470"  horizontalScrollPolicy="off" verticalScrollPolicy="off" visible="false">						 										 			
									 				<view:TaskResources width="470" selectedTask="{selectedTask}" id="taskResources"  horizontalScrollPolicy="off" verticalScrollPolicy="off"  />						 			
									 			</mx:Canvas>						
						 					</mx:GridItem>
						 				</mx:GridRow>
						 			</mx:Grid> 			
						 		</mx:GridItem>
						 	</mx:GridRow>
						 </mx:Grid>
					</mx:Canvas>
			    </mx:VBox>
		</mx:HBox>
	</comp:DragPanel>
	<comp:DragPanel styleName = "dragPanelTaskPreview"     
		id = "dragPanelTaskPreview" borderColor="black" 
		horizontalScrollPolicy="off" 
		verticalScrollPolicy="off" 
		dropShadowEnabled="false"  
		alpha="1" visible="false"> 		
		<view:TaskPreview id = "taskPreview" width="100%" />
	</comp:DragPanel>	
	<comp:DragPanel id = "dragProgress" 
		visible="false" 
		horizontalScrollPolicy="off"
		verticalScrollPolicy="off"
		height="100%" 
		width="100%"  
		headerHeight="0"
		dropShadowEnabled="false"
		backgroundAlpha="0"
		verticalAlign="middle"
		horizontalAlign="center"
		styleName = "dragPanelTaskPreview"
		borderColor="black" 	>
		<mx:Canvas height="50" width="150"
			 backgroundColor="#ffffff"
			 dropShadowEnabled="true" dropShadowColor="0x000000"
	 		 shadowDirection="right" shadowDistance="5" 
			 borderColor="#eaeaea"			 
			 styleName="FontCornerRadius">
			<mx:HBox verticalAlign="middle" horizontalAlign="left" width="100%" height="100%">
				<mx:Spacer width="10" />
				<mx:Image width="25" height="25" source="{loading_image}"    />
				<mx:Label text="Loading..." styleName="labelLoading" />
			</mx:HBox>
		</mx:Canvas>
	</comp:DragPanel>	
	<!-- 
		The tab of the Navigation Section
		Must be here to overlap the Gantt				
	-->
	<mx:Image id="tab_handler_overview" useHandCursor="true" buttonMode="true" click="showHideOverView()" 
					right="50" bottom="0" width="75" height="17"
					source="@Embed(source='imgs/tab_horizontal_title_navigator_collapse.png')" />	
</mx:Canvas>

<mx:Canvas id="contentBarChartOverview" height="8" width="100%" verticalScrollPolicy="off"
	 backgroundAlpha=".0" >
		<mx:VBox width="100%" height="100%" verticalGap="0" horizontalGap="0">
			<!-- 
				Here starts the handler and the tab of Navigation				
			-->
		<mx:Canvas width="100%" click="showHideOverView()" height="6" backgroundAlpha=".0">					
					<mx:Canvas 
						height="7" width="100%" bottom="0" x="0" backgroundSize="100%"
						backgroundImage="@Embed(source='imgs/tab_horizontal_handler.png')" 
						useHandCursor="true" buttonMode="true" />
					<mx:Image useHandCursor="true" buttonMode="true" 
						left="300" bottom="0" width="18" height="7"
						source="@Embed(source='imgs/tab_horizontal_handler_lines.png')" />
			</mx:Canvas>
			<view:BarChartOverview width="100%" height="100%" id="barChartOverview"/>
		</mx:VBox>
</mx:Canvas>
</mx:VBox>

