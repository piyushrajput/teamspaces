<mx:Canvas xmlns:mx = "http://www.adobe.com/2006/mxml"
	height="100%" width="100%" borderColor="#FFFFFF" focusEnabled="true"
	xmlns:view="com.salesforce.gantt.view.*" 
	mouseMove="parentDocument.barChart.outCanvasDataGrid(false)"
	verticalScrollPolicy="off" horizontalScrollPolicy="off">
<mx:Script>
	<![CDATA[
	
		import mx.effects.RemoveItemAction;	
		import mx.events.CalendarLayoutChangeEvent;
		import mx.controls.Button;   
		import mx.utils.StringUtil;
		import mx.events.CloseEvent;
		import mx.events.ScrollEvent;
		import com.salesforce.gantt.model.Heriarchy;
		import mx.events.AdvancedDataGridEvent;
		import mx.containers.Grid;
		import mx.events.DragEvent;
		import com.salesforce.gantt.controller.Constants;
		import com.salesforce.gantt.model.Dependency;
		import com.salesforce.gantt.model.Resource;
		import com.salesforce.gantt.controller.Components;
		import com.salesforce.gantt.controller.Tasks;
		import com.salesforce.gantt.model.UiTask;
		import com.salesforce.gantt.model.Task;
		import com.salesforce.gantt.model.TaskDate;
		import com.salesforce.gantt.model.UI;
		import flash.events.Event;
		import flash.events.EventDispatcher;
		import mx.controls.Alert;
		import mx.events.ListEvent; 
		import mx.collections.ArrayCollection;
		import mx.collections.*;		
		import mx.printing.*;
	    import com.salesforce.gantt.view.print.FormPrintViewTask;
	    import mx.core.IUIComponent;
	    import mx.effects.easing.*;
	
	    // Drag and drop
		import mx.managers.DragManager;
 	    import mx.core.DragSource;
   	    import mx.events.DragEvent;
   	    
   	    // Filters for eyecandy
		import flash.filters.DropShadowFilter;
		import flash.filters.BitmapFilterQuality;
		import flash.filters.GlowFilter;
	
	 	// Mouse and cursor
		import mx.managers.CursorManager;
	
    [Bindable]
    public var selectedTask : UiTask;
    [Bindable] 
    public var visibleTasks : ArrayCollection = new ArrayCollection();
    [Bindable] 
    public var visibleTasksList : ArrayCollection = new ArrayCollection();
     
     public var hasCreating : Boolean = false;//utilizada para saber si al deshacer(al presionar escape) hay que borrar la tarea o no
     
     public var selectedTaskAux: Object;
     			
	[Embed(source="imgs/stepper_arrow_down.png")]
    private var stepper_down_enabled : Class;
    [Embed(source="imgs/stepper_arrow_up.png")]
    private var stepper_up_enabled : Class;

	[Embed(source="imgs/hand_down.png")]
	private var cursorHandDown: Class;
	 
     
     [Embed(source="imgs/collapse.jpg")]
     private var imgCollapse : Class;
     [Embed(source="imgs/expand.jpg")]
     private var imgExpand : Class;
     private var none : Class;
     private var taskDeleted : Task;
     private var dateStart : Date = new Date();
     
     public function newDate() : void
     {
     	dateStart = new Date();
     }
     public function showDate() : void
     {
     	//trace('=> '+Number(new Date().getTime() - dateStart.getTime()));
     }
	/*
	* Estilo para la imagen de una tarea fase
	*/
     public function imageEmbed(image : int) : Class
     {
     	switch (image)
     	{
     		case 0:
     			return imgCollapse;
     			break;
     		case 1:
     			return imgExpand;
     			break;
     		default:
     			return none;
     			break;	
     	}
     }
     /*
     * Funcion que se llama cuando se selecciona una fila de la grilla, 
     * asignando la tarea que se encuentra en esa posicion a taskSelected
     */
    private var listEventTemp : ListEvent = null;
	private function select(listEvent : ListEvent) : void
	{	
		
		if(listEvent.rowIndex == (visibleTasksList.length - 1))
		{
			drawSpriteCell(true);
			parentDocument.barChart.clesrBorderSelected();
		}
		else if(listEvent.rowIndex >= 0 && listEvent.rowIndex < visibleTasksList.length)
    	{
			
				var id : String = visibleTasksList.getItemAt(listEvent.rowIndex).id;
				Components.instance.tasks.select(id);
				parentDocument.centerTask();
				dispatchEvent(new Event(Constants.TASK_SELECT));	
			
			
	    }
	}
	/*
	* Borra la tarea si es que hay una seleccionada
	*/
	public function deleteTask(data : Object, confirm : Boolean = true) : void
	{
		//Alert.show('Are you sure you want to delete this task?','',mx.controls.Alert.OK | mx.controls.Alert.CANCEL, this, alertListener, null, Alert.OK);
		
		taskDeleted = Components.instance.tasks.getTask(data.id);
		if(confirm)
		{
			parentDocument.showDeleteDialog();
			//Alert.show('Are you sure you want to delete this task?','',mx.controls.Alert.OK | mx.controls.Alert.CANCEL, this, alertListener, null, Alert.OK);
		}
		else
		{
			parentDocument.barChart.setTasksDeleted(taskDeleted);
		}
		
	}
	private function alertListener(event : CloseEvent) : void 
	{
		if (event.detail==Alert.OK) 
		{
			parentDocument.visibilityLoadingProgress(true);
			parentDocument.barChart.setTasksDeleted(taskDeleted);
		}
	}
	public function filterVisibleTaskTest(item:Object) : Boolean
	{
		return item.isVisible();
	}
	/*
	* Actualixa la grilla
	*/
	public function filter() : void
	{
		newDate();
		var f : Date = new Date();
		visibleTasksList = Components.instance.tasks.filterVisibleTask();
	//	trace('filterVisibleTask()=> '+Number(new Date().getTime() - f.getTime()));
		visibleTasks.list = visibleTasksList.list;
	//	Components.instance.tasks.allTasks.filterFunction = filterVisibleTaskTest;
	//	Components.instance.tasks.allTasks.refresh();

		var uiTask : UiTask;
		if(visibleTasksList.length>0)
		{
			if(!UiTask(visibleTasksList.getItemAt(visibleTasksList.length-1)).isHidden)
			{
				uiTask = new UiTask(' ', Components.instance.calendar.toString(new Date()), 1, '');
				uiTask.isHidden = true;
				uiTask.heriarchy = new Heriarchy(0);
				uiTask.positionVisible = visibleTasksList.length + 1;
				visibleTasksList.addItem(Task(uiTask));
			}
		}
		else if(visibleTasksList.length==0)
		{
			uiTask = new UiTask(' ', Components.instance.calendar.toString(new Date()), 1, '');
			uiTask.isHidden = true;
			uiTask.heriarchy = new Heriarchy(0);
			uiTask.positionVisible = visibleTasksList.length + 1;
			visibleTasksList.addItem(Task(uiTask));
		}
		enabledFirstImage();
		parentDocument.barChart.resizeBarChart();
	}
	/*
	* Muestra las flechas para crear una tarea cuando no hay tareas
	*/
	private function enabledFirstImage() : void
	{
		if(visibleTasksList.length == 1)
		{
			createFirstTask.visible = true;
			createFirstTask.x = gridColumnPosition.width +  7;
		}
		else
		{
			createFirstTask.visible = false;
		}
	}
	/*
	* Llamada cuando se hace click en las imagenes mas/menos
	* para expandir o contraer las tareas
	*/
	public function toggleExpanded(data : Object) : void
	{
		hasUpdating = true;
		//Components.instance.tasks.select(data.id);
		//data.isExpanded = !data.isExpanded;
		Components.instance.tasks.getTask(data.id).isExpanded = !data.isExpanded;
	//	Components.instance.tasks.setParent();
		filter();
	}
	
	
	/**
	* Set the selected task
	*/
	public function setSelectedTaskData(data : Object) : void{
    	selectedTaskAux = data;
    	//Alert.show('the task are :'+selectedTaskAux);
    }
	/*
	* Llamada por la grilla para editar una tarea
	*/  
	public function updateTask(data : Object, event : Event, type : String) : void
	{		
		
		if(type != 'priority'){
			var taskTemp : Task = Components.instance.tasks.getTask(data.id).clone();
		} else {
			var taskTemp : Task = Components.instance.tasks.getTask(selectedTaskAux.id).clone();
			Alert.show('the task are :'+selectedTaskAux);
		}
		//Components.instance.tasks.select(data.id);
		//var taskTemp : Task = Components.instance.tasks.selectedTask.clone();
		if(taskTemp != null)
		{
			if(type == Constants.LEFT || type == Constants.RIGHT)
			{
				if(taskTemp.position != 1)
				{
					Components.instance.controller.indent(taskTemp, type);
					filter();
				}
			} 
			else 
			{
				parentDocument.visibilityLoadingProgress(true);
				var text : String = '';
				if(type == Constants.DURATION || type == Constants.COMPLETED)
				{
					text = event.currentTarget.value;
				} 
				else
				{
					 text = event.currentTarget.text;
				}
				update(taskTemp, type, text);
			}
		}
	}
	/*
	* Edita una tarea
	*/
    private function update (taskTemp : Task, type : String, text : String, saveInHistory : Boolean = true) : void
    {
    	Components.instance.tasks.setUpdateTask(taskTemp, type, text, saveInHistory);
		dispatchEvent(new Event(Constants.TASKS_FILTERS));
		dispatchEvent(new Event(Constants.TASK_SELECT));
		dispatchEvent(new Event(Constants.TASK_CENTER));
    }
    /*
    * Llamada por la grilla para crear una tarea
    */
    public function addTask(action : String, data : Object) : void
	{
		parentDocument.visibilityLoadingProgress(true);
		if(data != null)
		{	
			var clonedTask : Task = null;
			if(action!='writing')
			{
				Components.instance.tasks.select(data.id);
				clonedTask = Components.instance.tasks.selectedTask.clone();
			}
			else
			{
		  		clonedTask = Task(data);
		 	}
		 	Components.instance.controller.addTask(clonedTask, action);
	  	}
	 	else
	 	{
 			//the first task or the last task
 			createFirstTask.visible = false;
 			Components.instance.controller.addTask(null, action);
	 	}
	 	hasCreating=false;
	 	taskCreated=null;
	 	//filter();
	 	dispatchEvent(new Event(Constants.TASKS_FILTERS));
	 	parentDocument.barChartOverview.getScaleHeightOverview();
	}
	/*
	* Setea la posicion del scroll
	*/
	public function setScroll(row : int = -1) : void
	{
		if(visibleTasksList!=null)
		{
			var heightCanvas : int = parentDocument.dragPanelTasks.height / UI.ROW_HEIGHT;
			var maxScroll : int = (visibleTasksList.length - heightCanvas);
			if(maxScroll > 0)
			{
		 		var verticalScrollPosition : int = maxScroll-(visibleTasksList.length-row-1) + 1;
		 		if(verticalScrollPosition < 0)
		 		{
		 			verticalScrollPosition = 0;
		 		}
		 		taskListAdvancedDataGrid.verticalScrollPosition = verticalScrollPosition;
		 	}
		}
 	}
 	/*
	* Muestra el panel para agregar una dependencia a la tarea
	*/
	public function addDependency(data : Object) : void
	{
		Components.instance.tasks.select(data.id);
		dispatchEvent(new Event(Constants.ADD_DEPENDENCY));
	}
	/*
	* Muestra el panel para agregar un recurso a la tarea
	*/
	public function addTaskResources(data : Object) : void
	{
		Components.instance.tasks.select(data.id);
		parentDocument.openAssigneesTab = true;
		parentDocument.editTaskOverlay();
	}
	/*
	* Setea el scroll cuando se mueve el gantt
	*/
	private var isMoveGantt : Boolean = false;
	public function moveGrid(rowHeight : int, positionY : int) : void
	{
		isMoveGantt = true;
		//var dateStart : Date = new Date();
		if(parentDocument.dragPanelTasks.width!=Constants.GRID_PANEL_MIN_WIDTH)
		{
			taskListAdvancedDataGrid.verticalScrollPosition = int(positionY / rowHeight);
		}
		//trace('- '+Number(new Date().getTime() - dateStart.getTime()));
		drawSpriteCell();
		checkhideProgress();
	}
	private function checkhideProgress() : void
	{
		if(isMoveGantt)
		{
			parentDocument.visibilityLoadingProgress(false);
			isMoveGantt = false;
		}
	}
	/*
	* Asigna el estilo negrita/normal para la escala 
	*/
	public function fontWeight(data : Object) : String
	{
		var task : UiTask = UiTask(data);
		if(task.imageSign()!=-1)
		{
			return 'bold';
		}
		else
		{
			return 'normal';
		}
	}
	/*
	* Verifica si es numerico el evento del teclado(keyUp o KeyDown)
	*/
	private function isNumber(num : int) : Boolean
	{
		return (num > 47 && num < 58);
	}
	/*
	* Retorna el caracter correspondiente al evento del teclado
	*/
	public function numToChar(num:int):String {
        if (num > 47 && num < 58) {
            var strNums:String = "0123456789";
            return strNums.charAt(num - 48);
        } else if (num > 64 && num < 91) {
            var strCaps:String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            return strCaps.charAt(num - 65);
        } else if (num == 32) {
            return ' ';
        } else if (num > 96 && num < 123) {
            var strLow:String = "abcdefghijklmnopqrstuvwxyz";
            return strLow.charAt(num - 97);
        } else {
            return '';
        }
    }
    
    private var taskDraged : Task = null;
    /**
	* Drag and Drop
	* dragEnter 
	*/
 	private function dataGridDragEnter(event : DragEvent) : void
    {
	
		if(parentDocument.userProfilePermissions.canManage){
	    	CursorManager.setCursor(cursorHandDown,2.0,-8);
	    	var position : int = (event.stageY / UI.ROW_HEIGHT) - 1;
	    	var index : int = position - 1;
	    	if(index < Components.instance.tasks.allTasks.length && index > -1)
	    	{
	    		taskDraged = Task(Components.instance.tasks.allTasks.getItemAt(index));
	    	}
	 	} else {
	 		trace('Drag not Enabled');
	 	}
    }
    /**
	* Drag and Drop
	* dragDrop 
	*/
    private function dataGridDragDrop(event : DragEvent) : void
    {
    	if(taskDraged != null)
    	{
    		var position : int = (event.stageY / UI.ROW_HEIGHT) - 1;
    		var index : int = position - 1;
    		if(index >= Components.instance.tasks.allTasks.length)
    		{
    			index = Components.instance.tasks.allTasks.length - 1;
    		}
    		if(index > 0)
    		{
    			var taskBefore : Task = Task(Components.instance.tasks.allTasks.getItemAt(index - 1));
    			//si la tarea q se encuetra antes en la lista tiene hijos
    			if(taskBefore.heriarchy.hasChildren(taskBefore.id))
    			{
    				taskDraged.heriarchy = new Heriarchy(taskBefore.heriarchy.indent + 1, taskBefore);
    			}
    			else//si la tarea q se encuetra antes en la lista NO tiene hijos
    			{
    				taskDraged.heriarchy = new Heriarchy(taskBefore.heriarchy.indent, taskBefore.heriarchy.parent);
    			}
    		}
    		else
    		{
    			taskDraged.heriarchy = new Heriarchy(0);
    		}
    		if(index > 0)
    		{
	    		var indexBefore : int = taskDraged.position - 1;
	    		Components.instance.tasks.allTasks.removeItemAt(indexBefore);
	    		taskDraged.position = position;
	    		Components.instance.tasks.allTasks.addItemAt(taskDraged, index);
	    		Components.instance.salesforceService.taskOperation.update(taskDraged);
	    		filter();
	    	}
	    	
	    	drawSpriteCell();
    	}
    	
    }
    /*
	* Llamada en el evento click de la grilla detectando si se hizo click
	* en la posicion siguiente a la ultima tarea para crear una nueva
	*/
    private function dataGridClick(event : MouseEvent) : void
    {
    	var position : int = ((event.stageY - 30) / UI.ROW_HEIGHT);
		var index : int = position + taskListAdvancedDataGrid.verticalScrollPosition;
		
		if(event.stageX < (parentDocument.dragPanelTasks.width - 40))
		{
			//rowGPrevious = rowG;
			rowG = index - 1;
			if(index == visibleTasksList.length)
			{
				if(parentDocument.userProfilePermissions.canManage){
					colG=4; 
					paintSelect();
					focusInTextWriting(4,'');
				}//addTask('lastTask', null);
			}
		}
		//paintSelect(false);
    }
    /*
	* Calcula el height que debe tener la grilla de impresion para 
	* que entren todas las dependencias y todos los recursos de cada una de las tareas
	*/
    private function heightRowDataGrodPrint() : int
    {
    	var amountOfLineByLine : int = 1;
    	for(var i : int = 0; i < visibleTasksList.length; i++)
    	{
    		var task : Task = Task(visibleTasksList.getItemAt(i));
    		if(task.taskResources.length > amountOfLineByLine)
    		{
    			amountOfLineByLine = task.taskResources.length;
    		}
    		if((task.dependencies.length / 3) > amountOfLineByLine)
    		{
    			amountOfLineByLine = task.dependencies.length / 3;
    			if((task.dependencies.length % 3) != 0 )
    			{
    				amountOfLineByLine++;
    			}
    		}
    	}
    	return amountOfLineByLine;
    }
    /*
	* Retorna una tarea "visible" por id
	*/
    public function getVisibleTask(id : String) : Task
    {
    	for(var i : int = 0; i < visibleTasksList.length; i++)
    	{
    		var task : Task = Task(visibleTasksList.getItemAt(i));
			if(task.id==id)
			{
				return task;
			}
    	}
    	return null;
    }
    /*
	* Imprime la grilla
	*/
    // The function to print the output.
    public function doPrint():void 
    {
    	var scaleRowHeightPrint : int = 20;
        var printJob : FlexPrintJob = new FlexPrintJob();
        if (printJob.start()) {
            // Create a FormPrintView control as a child of the current view.
            var thePrintView : FormPrintViewTask = new FormPrintViewTask();
            
            parentApplication.addChild(thePrintView);
            
            //Set the print view properties.
            thePrintView.width=printJob.pageWidth;
            thePrintView.height=printJob.pageHeight;
            
            //seteo el rowHeight
            thePrintView.myDataGrid.rowHeight = scaleRowHeightPrint * heightRowDataGrodPrint();
            
			//  thePrintView.prodTotal = prodTotal;
            // Set the data provider of the FormPrintView component's data grid
            // to be the data provider of the displayed data grid.
            thePrintView.myDataGrid.dataProvider = taskListAdvancedDataGrid.dataProvider;
            // Create a single-page image.
            thePrintView.showPage("single");
            // If the print image's data grid can hold all the provider's rows, 
            // add the page to the print job. 
            if(!thePrintView.myDataGrid.validNextPage)
            {
                printJob.addObject(thePrintView);
            }
            // Otherwise, the job requires multiple pages.
            else
            {
                // Create the first page and add it to the print job.
                thePrintView.showPage("first");
                printJob.addObject(thePrintView);
                thePrintView.pageNumber++;
                // Loop through the following code until all pages are queued.
                while(true)
                {
                    // Move the next page of data to the top of the print grid.
                    thePrintView.myDataGrid.nextPage();
                    thePrintView.showPage("last");    
                    // If the page holds the remaining data, or if the last page 
                    // was completely filled by the last grid data, queue it for printing.
                    // Test if there is data for another PrintAdvancedDataGrid page.
                    if(!thePrintView.myDataGrid.validNextPage) 
                    {
                        // This is the last page; queue it and exit the print loop.
                        printJob.addObject(thePrintView);
                        break;
                    }
                    else
                    // This is not the last page. Queue a middle page. 
                    {
                        thePrintView.showPage("middle");
                        printJob.addObject(thePrintView);
                        thePrintView.pageNumber++;
                    }
                }
            }
            // All pages are queued; remove the FormPrintView control to free memory.
            parentApplication.removeChild(thePrintView);
        }
        // Send the job to the printer.
        printJob.send();
    }	
    
    
	public var rowG : int = -1;
	//public var rowGPrevious : int = -1;
	public var colG : int = 0;
 	public var isFocusInTextInput : Boolean = false;
 	public var isClickInTextInput : Boolean = false;
 	public var hasUpdating : Boolean = false;
 	/*
 	public function clickAndFocusInTextInput() : void
 	{
 		isClickInTextInput = true;
		isFocusInTextInput = true;
 	}*/
    /*
	* Setea el row y el col del focus en la grilla
	*/
    public function setSelectionModeCell(row : int, col : int) : void
    {
		//rowGPrevious = rowG;
		rowG = row;
		colG = col;
    }
    
    
    
    /*
	* Setea el row y el col
	*/
    public function setPaintIndices(rowIndex : int, columnIndex : int= -1) : void
    {
		//rowGPrevious = rowG;
		rowG = rowIndex;
		if(columnIndex!=-1)
		{
			colG = columnIndex;
		}
    }
    /*
	* 
	*/
    public function paintSelect(setPosScroll : Boolean = true) : void
    {
    	//var selectedCells : Array = [ { rowIndex : rowG, columnIndex : colG }];
    	if(setPosScroll)
    	{
    		setScroll(rowG);//esto es para que se vea el row ya que da error cuando hace el .selectedCells
    	}
    	moveBarChartVertically();
		drawSpriteCell();
    }
    /**
	* When a key is pressed at the datagrid.
	*/
	private function myKeyUpHandler(event:KeyboardEvent):void
    {
    	switch (event.keyCode)
    	{
    		case 13:
    			if(rowG < (visibleTasksList.length - 1))
    			{
    				rowG++;
    			}
    			isFocusInTextInput = false;
				paintSelect();
				parentDocument.barChart.clesrBorderSelected();
				
				taskListAdvancedDataGrid.selectedCells = [ { rowIndex : (rowG), columnIndex : colG }];
				//moveBarChartVertically();
    			break;
    		case 37://izq
    			if(colG>0 && !isFocusInTextInput)
    			{
    				colG--;
    				paintSelect(false);
    				taskListAdvancedDataGrid.selectedCells = [ { rowIndex : (rowG), columnIndex : colG }];
    			}
    			break;
    		case 38://arriba
    			if(rowG>0 && !isFocusInTextInput)
    			{
    				rowG--;	
    				paintSelect(false);
    				taskListAdvancedDataGrid.selectedCells = [ { rowIndex : (rowG), columnIndex : colG }];
    			}
    			break;
    		case 39://der
    			if(colG<10 && !isFocusInTextInput)
    			{
    				colG++;
    				paintSelect(false);
    				taskListAdvancedDataGrid.selectedCells = [ { rowIndex : (rowG), columnIndex : colG }];
    			}
    			break;
    		case 40://abajo
    			if(rowG < visibleTasks.length-1 && !isFocusInTextInput)
    			{
    				rowG++;
    				paintSelect(false);
    				taskListAdvancedDataGrid.selectedCells = [ { rowIndex : (rowG), columnIndex : colG }];
    			}
    			break;
    		case 27:
    		//case 32:
    			break;
    		default:
   				switch(colG)
				{
					case 4:
   						focusInTextWriting(colG, numToChar(event.charCode));
						break;
					case 5:
					case 8:
						if(isNumber(event.charCode))
						{
							focusInTextWriting(colG, numToChar(event.charCode));
						}
						break;
				}
        		break;
    	}
    	if(rowG > -1)
    	{
	    	var id : String = visibleTasksList.getItemAt(rowG).id;
			Components.instance.tasks.select(id);
			parentDocument.editTaskPanel.loadSelectedTask();
    	}
    }
    /*
    * Posiciona el foco en el textWriting, redimensioe este 
    * y lo muestra en la row/col correspondientes
    */
    public function focusInTextWriting(col : int, text : String) : void
    {
    	if(parentDocument.userProfilePermissions.canManage){
	    	writingText.text = text;
	    	switch(col)
			{
				case 4:
					writingCanvas.y = (rowG * UI.ROW_HEIGHT) + UI.ROW_HEIGHT + 3 - (taskListAdvancedDataGrid.verticalScrollPosition * UI.ROW_HEIGHT);
					writingCanvas.x = gridColumnPosition.width+(Task(visibleTasksList.getItemAt(rowG)).heriarchy.indent*UI.indent)+27;
					writingCanvas.width = 190 - (Task(visibleTasksList.getItemAt(rowG)).heriarchy.indent*UI.indent);
					writingCanvas.visible = true;
					writingText.setFocus();
					break;
				case 5:
					writingCanvas.y = (rowG * UI.ROW_HEIGHT) + UI.ROW_HEIGHT + 3 - (taskListAdvancedDataGrid.verticalScrollPosition * UI.ROW_HEIGHT);
					writingCanvas.x = gridColumnPosition.width+gridColumnTaskName.width+3;
					writingCanvas.width = gridColumnDuration.width-22;
					writingCanvas.visible = true;
					writingText.setFocus();
					break;
				case 8:
					writingCanvas.y = (rowG * UI.ROW_HEIGHT) + UI.ROW_HEIGHT + 3 - (taskListAdvancedDataGrid.verticalScrollPosition * UI.ROW_HEIGHT);
					writingCanvas.x = gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width+gridColumnEndDate.width+3;
					writingCanvas.width = gridColumnCompleted.width-22;
					writingCanvas.visible = true;
					writingText.setFocus();
					break;
			}
    	}
    }
    /*
	* Captura evneto del keyDown del textWriting 
	* - Con el enter(case 13) crea o edita una tarea
	* - Con el scape(case 27) borraa o edita una tarea
	*/
	public var isTyping : Boolean = false;
	
    private function keyPressWriting(event : KeyboardEvent) : void
    {
    	switch (event.keyCode)
    	{
    		case 13:
    			if(StringUtil.trim(writingText.text)=='')
				{
					// The enter key					
				} 
				else
				{
					isTyping=false;
					newDate();
	    			saveWriting();	    			
	    			rowG++;
	    			paintSelect();
	    			hasCreating=false;
	    			taskCreated=null; 
   				}
    			break;
    		case 27:
    			if(hasCreating)
    			{
    				deleteTask(visibleTasksList.getItemAt(rowG),false);
    			}
    			clearWritingText();
	    		taskListAdvancedDataGrid.setFocus();
	    		hasCreating=false;
	    		taskCreated=null;
    			break;
    		default:
    			isTyping = true;
    		break;
    	}
    }
    
     /**
	 * Checks the text enterd to avoid the creation of null tasks
	 */
	 public function checkTaskFocusOut() : void
	 {
	 		if(writingText.text == ''){
	 				if(hasCreating){
	 					Alert.show('Please Check the task name.');	 				
	 				}
		 	}	else {
		 		isTyping=false;
		 		writingCanvas.visible=false;
	    		saveWriting();	
		 		hasCreating=false;
		 		taskCreated=null;
		 		writingText.text='';
		 	}
	 }
	 
    /*
	* Vacioa y oculta el textWriting
	*/
    public function clearWritingText() : void 
    {
    	writingText.text='';
    	writingCanvas.visible = false;
    }
    /*
	* Llamada al presionar enter en el textWriting para crear o editar una tarea
	*/
    private function saveWriting() : void
    {
    	var row : int = rowG;
		visibleTasksList.getItemAt(row).isHidden = false;
		var num : int = 0;
		var task : Task= visibleTasksList.getItemAt(row).clone();
		var saveInHistory : Boolean = true;
		if(hasCreating)
		{
			saveInHistory = false;
		}
		switch(colG)
		{
			case 4:
				task.name = writingText.text;
			
				if(rowG == visibleTasksList.length - 1)
				{
					addTask('writing', task);
				}
				else
				{
					update(task,Constants.NAME,writingText.text,saveInHistory);
				}
				
				break;
			case 5:
				num = int(writingText.text);
				if(num<0)
				{
					num = 0;
				}
				task.duration = num;
				if(rowG == visibleTasksList.length - 1)
				{
					addTask('writing', task);
				}
				else
				{
					//trace('EDIT '+task.positionVisible+') '+num.toString());
					update(task,Constants.DURATION,num.toString(),saveInHistory);
				}
				break;
			case 8:
				num = int(writingText.text);
				if(num<0)
				{
					num = 0;
				}
				if(num>100)
				{
					num = 100;
				}
				task.completed = num;
				if(rowG == visibleTasksList.length - 1)
				{
					addTask('writing', task);
				}
				else
				{
					update(task,Constants.COMPLETED,num.toString(),saveInHistory);
				}
				break;
		}
		
			writingText.text='';
			writingCanvas.visible = false;
    		taskListAdvancedDataGrid.setFocus();
  		
    }
    /*
	 public function isFocus(row:int,col:int) : Boolean
	 {
	 	if(row==rowG && col==colG)
	 	{
	 		return true;
	 	}
	 	return false;
	 }*/
	 /*
	 * Llama al gantt para moverlo cuando se mueve el scroll de la grilla
	 */
	 private function moveBarChartVertically() : void
	 {
	 	var positionActual : int = parentDocument.barChart.barChartCanvas.y / UI.ROW_HEIGHT * (-1);
	 	var potitionChange : int = taskListAdvancedDataGrid.verticalScrollPosition;
	 	parentDocument.barChart.moveBarChartVertically((positionActual - potitionChange) * UI.ROW_HEIGHT);
	 }
	 /*
	 * Calcula el width de recuadro de la row/col del focus
	 */
	 private function cellSelectedWidth() : int
	 {
	 	var width : int = 0;
	 	switch (colG)
	 	{
	 		case 0:
	 			width = gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width+gridColumnEndDate.width+gridColumnCompleted.width+gridColumnResources.width;
	 			break;
	 		case 4:
	 			width = gridColumnTaskName.width;
	 			break;
 			case 5:
	 			width = gridColumnDuration.width;
	 			break;
	 		case 6:
	 			width = gridColumnStartDate.width;
	 			break;
 			case 7:
	 			width = gridColumnEndDate.width;
	 			break;
	 		case 8:
	 			width = gridColumnCompleted.width;
	 			break;	 		
	 		case 10:
	 			width = gridColumnResources.width;
	 			break;
	 	}
	 	return width;
	 }
	 /*
	* Calcula el x de recuadro de la row/col del focus
	*/
	 private function cellSelectedX() : int
	 {
	 	var x : int = 0;
	 	switch (colG)
	 	{
	 		case 1:
	 			x = gridColumnPosition.width;
	 			break;
	 		case 2:
	 			x = gridColumnPosition.width;
	 			break;
	 		case 3:
	 			x = gridColumnPosition.width;
	 			break;
 			case 4:
	 			x = gridColumnPosition.width;
	 			break;
	 		case 5:
	 			x = gridColumnPosition.width+gridColumnTaskName.width;
	 			break;
 			case 6:
	 			x = gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width;
	 			break;
	 		case 7:
	 			x = gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width;
	 			break;
 			case 8:
	 			x = gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width+gridColumnEndDate.width;
	 			break;
	 		case 9:
	 			x = gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width+gridColumnEndDate.width+gridColumnCompleted.width;
	 			break;
	 		case 10:
	 			x = gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width+gridColumnEndDate.width+gridColumnCompleted.width;
	 			break;
	 	
	 	}
	 	return x;
	 }
	 /*
	* Retorna true si un valor esta entre otros dos valores
	*/
	 private function isBetween(value : int, start : int, end : int) : Boolean
     {
      	return ( (value >= start) && (value <= end) );
     }
     /*
	* Dada una posicion x, retorna la columna a la cual corresponde
	*/
	 private function colOfX(x : int) : int
	 {
	 	var col : int = 0;
	 	if(isBetween(x, 0, gridColumnPosition.width))
	 	{
	 		col = 0;
	 	}
	 	else if(isBetween(x, gridColumnPosition.width, gridColumnPosition.width))
	 	{
	 		col = 1;
	 	}
	 	else if(isBetween(x, gridColumnPosition.width,  gridColumnPosition.width))
	 	{
	 		col = 2;
	 	}
	 	else if(isBetween(x, gridColumnPosition.width, gridColumnPosition.width))
	 	{
	 		col = 3;
	 	}
	 	else if(isBetween(x, gridColumnPosition.width+gridColumnPosition.width,gridColumnTaskName.width))
	 	{
	 		col = 4;
	 	}
	 	else if(isBetween(x, gridColumnPosition.width+gridColumnTaskName.width, gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width))
	 	{
	 		col = 5;
	 	}
	 	else if(isBetween(x, gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width, gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width))
	 	{
	 		col = 6;
	 	}
	 	else if(isBetween(x, gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width, gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width+gridColumnEndDate.width))
	 	{
	 		col = 7;
	 	}
	 	else if(isBetween(x, gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width+gridColumnEndDate.width, gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width+gridColumnEndDate.width+gridColumnCompleted.width))
	 	{
	 		col = 8;
	 	}
	 	else if(isBetween(x, gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width+gridColumnEndDate.width+gridColumnCompleted.width, gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width+gridColumnEndDate.width+gridColumnCompleted.width))
	 	{
	 		col = 9;
	 	}
	 	else if(isBetween(x, gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width+gridColumnEndDate.width+gridColumnCompleted.width, gridColumnPosition.width+gridColumnTaskName.width+gridColumnDuration.width+gridColumnStartDate.width+gridColumnEndDate.width+gridColumnCompleted.width+gridColumnResources.width))
	 	{
	 		col = 10;
	 	}
	 	return col;
	 }
	 /*
	* Dibuja el Sprite object que representa al borde de la row/col del focus en la grilla
	*/
	 public function drawSpriteCell(isNewTask : Boolean = false) : void
   	 {
   	 	//trace(isNewTask +'  ' + visibleTasks.length+  '  '+ rowG);
   	 	if(visibleTasks.length>1 && (rowG!=-1 || isNewTask))
   	 	{
	   	 	var name : String = 'drawSpriteCell';
			var labelSprite : Sprite = Sprite(taskListAdvancedDataGrid.getChildByName(name));
			var width : int = cellSelectedWidth();
			var height : int = UI.ROW_HEIGHT;
			var x : int = cellSelectedX() + 3;
			if(isNewTask)
			{
				var y : int = (visibleTasks.length) * height + 1;
			}
			else
			{
				var y : int = (rowG + 1) * height + 1;
			}
			//var scrollY : int = int(parentDocument.barChart.barChartCanvas.y / UI.ROW_HEIGHT);
			y -= (taskListAdvancedDataGrid.verticalScrollPosition * height);
			if(y>1)
			{
				
				if(labelSprite == null)
				{
					
					labelSprite = new Sprite();
					labelSprite.name = name;
					labelSprite.x = x;
					labelSprite.y = y;				
					if(colG!=0){
						
						labelSprite.graphics.drawRoundRect(0, 0, width, height, 0, 0);
						// Apply the glow filter to the cross shape.
						var glow:GlowFilter = new GlowFilter();
						glow.color = 0x000000;
						glow.alpha = 1;
						glow.blurX = 8;
						glow.blurY = 8;
						glow.quality = BitmapFilterQuality.MEDIUM;
						
						labelSprite.opaqueBackground = 0xFFFFFF;
						labelSprite.filters = [glow];
						labelSprite.alpha= 0.3;
					} else {
						
						width = width -  gridColumnPosition.width ;						
						
						labelSprite.graphics.drawRoundRect(gridColumnPosition.width - 1, 0, width, height, 0, 0);
						labelSprite.opaqueBackground = 0xCFECF2;						
						var glow:GlowFilter = new GlowFilter();
						glow.color = 0x000000;
						glow.alpha = 0;
						labelSprite.filters = [glow]; 
						labelSprite.alpha= 0.5;				
					}
					
					taskListAdvancedDataGrid.addChildAt(labelSprite, 3);
				}
				else
				{	
					labelSprite.x = x;
					labelSprite.y = y;
					labelSprite.graphics.clear();
					
					if(colG!=0){
					
						labelSprite.graphics.drawRoundRect(0, 0, width, height, 0, 0);
						// Apply the glow filter to the cross shape.
						var glow:GlowFilter = new GlowFilter();
						glow.color = 0x000000;
						glow.alpha = 1;
						glow.blurX = 8;
						glow.blurY = 8;
						glow.quality = BitmapFilterQuality.MEDIUM;						
						labelSprite.opaqueBackground = 0xFFFFFF;
						labelSprite.filters = [glow];
						labelSprite.alpha= 0.3;
					} else {
					
						width = width -  gridColumnPosition.width;						
						labelSprite.graphics.drawRoundRect(gridColumnPosition.width, 0, width, height, 0, 0);
						labelSprite.filters = null;
						var glow:GlowFilter = new GlowFilter();
						glow.alpha = 0;
						labelSprite.filters = [glow];
						labelSprite.opaqueBackground = 0xCFECF2;
						labelSprite.alpha= 0.5;
						labelSprite.addEventListener(MouseEvent.MOUSE_DOWN,clickSelectedSprite)
					}
					taskListAdvancedDataGrid.addChildAt(labelSprite, 3);
				}
			}
			else
			{
				labelSprite.graphics.clear();
			}
		}
   	 } 
   	 
   	 private function clickSelectedSprite(event : MouseEvent) : void
     {
     	colG = colOfX(event.localX);
    	drawSpriteCell();    	
		taskListAdvancedDataGrid.selectedCells = [ { rowIndex : (rowG), columnIndex : colG }];
     }
     /*
	* Retorna true si ese puede editar el porcentaje de completado
	*/
     public function editableCompleted(data : Object) : Boolean
	 {
		return (data.isEditable() && !data.isMilestone);
	 }
	 private var taskCreated : Task = null;
	 /*
	* Setea variables que indican que se acaba de crear una tarea
	*/
	 public function setInsertTaskName(task : Task) : void
	 {
	 	  taskCreated = task;
  		  hasCreating=true;
	 }
	 /*
	* Posiciona el textWriting en donde se va a crear la tarea
	*/
	 public function insertTaskName() : void
	 {
	 	if(taskCreated!=null)
	 	{
  		  setPaintIndices(taskCreated.positionVisible - 1, 4);
  		  focusInTextWriting(4, '');
  	 	}
	 }
	 
	 
	 
		
		[Bindable]
		[Embed(source="imgs/right_arrow.png")]
   		public  var cursorRightArrow : Class; 


		 /**
		 * Change cursor over task number
		 */
		 public function setCursor() : void 
		 {
		 	CursorManager.setCursor(cursorRightArrow,2.0,-8);							 	 
		 }
		 
		 public function unSetCursor() : void 
		 { 
		 	CursorManager.removeAllCursors();
		 }
		 
		  public function setDragCursor() : void 
		 {
		 	CursorManager.removeAllCursors();
		 	CursorManager.setCursor(cursorHandDown,2.0,-8);							 	 
		 }
							 
	]]> 
</mx:Script>
<mx:Style source="css/Grid.css"/>
<mx:Style>
	.scrollBar {
	   cornerRadius: 9;
	   highlightAlphas: 0, 0;
	   fillAlphas: 0.6, 0.39, 0.82, 0.65;
	   fillColors: #000000, #333333, #999999, #cccccc;
	   trackColors: #d9ddde, #ffffff;
	   themeColor: #666666;
	   borderColor: #000000;
	}
	
</mx:Style>	
	<mx:AdvancedDataGrid id="taskListAdvancedDataGrid" 
		styleName="dataGridTaskList"
		height="100%" width="100%" x="0" y="0"
		rowHeight="30" headerHeight="30" 
	    variableRowHeight="false" 
	    sortableColumns="false"
	  	selectionMode="singleCell"
	  	selectable="true"
	  	scroll="paintSelect(false)"
	  	itemClick="select(event)"
	  	click="dataGridClick(event)" 
	  	keyDown="myKeyUpHandler(event);"
	  	dataProvider="{visibleTasksList}"	
	  	dragEnabled="true"  	
	  	dropEnabled="true"
	  	dragEnter="dataGridDragEnter(event)"
	  	dragOver="setDragCursor();"
	  	dragDrop="dataGridDragDrop(event);unSetCursor();" 		
	  	selectionColor="#ffffff"
	  	verticalScrollBarStyleName="scrollBar">
        <mx:columns>
        <!-- 
        	to do: dragComplete="updateTask(data,event, 'priority');"
        	Task Number Column 
        -->
    	 <mx:AdvancedDataGridColumn 
    	 	textAlign="center" 
    	 	resizable="false" 
    	 	dataField="" 
    	 	minWidth="30" 
    	 	width="30" 
    	  	headerStyleName="gridColumnHeader" 
    	 	id="gridColumnPosition"    	 	
    	 	backgroundColor="#E1E2E1" 
    	 	>
        	<mx:itemRenderer >
            	<mx:Component >
						<mx:HBox 
	            				textAlign="center" 
	            				horizontalScrollPolicy="off" 
	            				backgroundAlpha="{data.alphaCut}" 
	            				click="outerDocument.setSelectionModeCell(data.position-1, 0);outerDocument.setSelectedTaskData(data);"
	            				backgroundColor="#E1E2E1" 
	            				width="30"  
	            				maxWidth="30"
	            				mouseMove="outerDocument.setCursor();"
	            				mouseOut="outerDocument.unSetCursor();" >
							<mx:Label textAlign="center" styleName = "taskNumber" text="{data.positionVisible}" visible="{!data.isHidden}" width="30" maxWidth="30" fontAntiAliasType="normal" />
	        			</mx:HBox>	
                </mx:Component>
            </mx:itemRenderer>
    	</mx:AdvancedDataGridColumn>
    	<!-- 
    		Task Name Column 
    	-->
        <mx:AdvancedDataGridColumn resizable="false" id="gridColumnTaskName" headerStyleName="gridColumnHeader"  
        	dataField = "Task Name" textAlign="center" minWidth = "230" width="230" fontAntiAliasType="normal">
            <mx:itemRenderer>
                <mx:Component>
					  <mx:HBox borderStyle="{creationComplete(data)}" backgroundAlpha="{data.alphaCut}" click="outerDocument.setSelectionModeCell(data.position-1, 4)" backgroundColor="#eaeaea"
					  	  horizontalScrollPolicy = "off"  fontAntiAliasType="normal" >
						<mx:Script>
						  <![CDATA[
						  import com.salesforce.gantt.model.UI;
						  import mx.utils.StringUtil;
						  import com.salesforce.gantt.controller.Components;
						  import com.salesforce.gantt.model.Task;
						  
						  private function creationComplete(data : Object) : String
						  {
						  	  //outerDocument.showDate();
						  	 // trace(Task(data).positionVisible);
						  	  if(data.name == '')
						  	  {
						  	  	 	  //outerDocument.showDate();
						  		  outerDocument.setInsertTaskName(Task(data));
						  	  }
						  	  return 'none';
						   }
						  	private function indent(data : Object) : int
						  	{
						  		return (data.heriarchy.indent * UI.indent);
						  	}
						  ]]>
						</mx:Script>
                        <mx:Label width="{indent(data)}"  visible="{!data.isHidden}" fontAntiAliasType="normal" />
                    	<mx:Image useHandCursor="true" buttonMode="true" click="outerDocument.toggleExpanded(data)" width = "10" id = "nodoImage" source="{outerDocument.imageEmbed(data.imageSign())}"  visible="{!data.isHidden}"  />
                        <mx:TextInput id="nameTask" text="{data.name}" alpha = "0"
                        	width = "100%"  styleName = "textInputGrill" height = "19" 
                        	  fontWeight="{outerDocument.fontWeight(data)}"  
                        	   visible="{!data.isHidden}"
                        	   editable="false"
                        	   click="outerDocument.taskListAdvancedDataGrid.setFocus()"
                        	   doubleClick="outerDocument.focusInTextWriting(4, nameTask.text)"
                        	   doubleClickEnabled="true"
                        	   fontAntiAliasType="normal" 
                        	   />
                    </mx:HBox>
                </mx:Component>
            </mx:itemRenderer>
        </mx:AdvancedDataGridColumn>
        <!-- Task Estimated Duration Column --> 
        <mx:AdvancedDataGridColumn 
        		resizable="false" 
        		id="gridColumnDuration" 
        		headerStyleName="gridColumnHeader"  
        		dataField = "Est (hrs)" 
        		minWidth = "75" 
        		width="75"
        		textAlign="center" >
            <mx:itemRenderer>
            	<mx:Component>
            		<mx:HBox backgroundAlpha="{data.alphaCut}" click="outerDocument.setSelectionModeCell(data.position-1, 5)" backgroundColor="#eaeaea" horizontalAlign="center" horizontalScrollPolicy = "off">
            			<mx:Script>
						  <![CDATA[     
						  import com.salesforce.gantt.controller.Constants;
						  private function updateTask(event : Event, data : Object) : void
						  {
						  	if(data.isEditable())
						  	{
						  		if(outerDocument.parentDocument.canModifySelectedTask || outerDocument.parentDocument.userProfilePermissions.canManage){
							  		if(event.currentTarget.value != data.duration)
							  		{
							  			outerDocument.hasUpdating = true;
							  			outerDocument.updateTask(data, event, Constants.DURATION);
							  		}
							  	}
						  	}
						  }
						  ]]>
						</mx:Script>
						<mx:Label text="{data.duration}" width="100%" 
								doubleClick="if(data.isEditable()){outerDocument.focusInTextWriting(5, duration.value.toString())}"
                        	    doubleClickEnabled="true" visible="{!data.isHidden}"/>
						<mx:NumericStepper  
							id = "duration"
							styleName="textInputGrill" 	
							fontWeight="{outerDocument.fontWeight(data)}"	            		 
		            		width="15" height = "100%" minimum="0" maximum="365" backgroundAlpha="0" 
		            		enabled="{data.isEditable()}"
		            		click="updateTask(event, data)"
		            		value="{data.duration}" visible="{!data.isHidden}">
		            			<mx:upArrowSkin>@Embed('imgs/stepper_arrow_up.png')</mx:upArrowSkin>
			            		<mx:downArrowSkin>@Embed('imgs/stepper_arrow_down.png')</mx:downArrowSkin>
		            	</mx:NumericStepper>
		            		
        			</mx:HBox>
                </mx:Component>
            </mx:itemRenderer>
        </mx:AdvancedDataGridColumn>
        <!--  Start Date Col -->
        <mx:AdvancedDataGridColumn
        	textAlign="center"  
        	resizable="false" 
        	id="gridColumnStartDate" 
        	headerStyleName="gridColumnHeader" 
        	dataField = "Start Date" minWidth = "80" width="80">
        	<mx:itemRenderer>
                <mx:Component>
                	<mx:HBox backgroundAlpha="{data.alphaCut}" click="outerDocument.setSelectionModeCell(data.position-1, 6)" backgroundColor="#eaeaea" horizontalScrollPolicy = "off" horizontalAlign="center">
                		<mx:Script>
						  <![CDATA[
						  
						  import mx.events.CalendarLayoutChangeEvent;
						  import com.salesforce.gantt.controller.Constants;
						  import com.salesforce.gantt.controller.Components;
						    
						  private function updateTask(event : Event, data : Object) : void
						  {
						  	if(event.currentTarget.text != data.startDate && event.currentTarget.text != '')
						  	{
						  		if(Components.instance.calendar.toString(data.startDate.date,"mm/dd/yyyy")!=event.currentTarget.text)
							  	{
						  			outerDocument.updateTask(data, event, Constants.START_DATE);
						  		}
						  	}
						  }
						   private function keyDown(event :KeyboardEvent):void
							  {
							  	if(event.keyCode==27)
							  	{
							  		startDate.close();
							  	}
							  }
							  private function updateDate(event : CalendarLayoutChangeEvent) : void {
								if (event.newDate != null) {
									var dateNew : Date = new Date(event.newDate.getFullYear(), event.newDate.month, event.newDate.date);
									startDate.selectedDate = event.newDate;
								}
							 }
							 
							 // Check If the user can edit the start date 
							  private function editStartDate() : void {						  	
							  	if(outerDocument.parentDocument.canModifySelectedTask || outerDocument.parentDocument.userProfilePermissions.canManage){
							  		startDate.open();
							  	}
							  }
						  ]]>
						</mx:Script>
						<mx:Canvas click="outerDocument.setPaintIndices(data.position-1,6);">
							<mx:LinkButton alpha="0" textAlign="center" height="100%" width="100%"
								enabled="{data.isEditable()}" visible="{!data.isHidden}" fontWeight="{outerDocument.fontWeight(data)}" 
								 click="editStartDate()" label="{startDate.text}" keyDown="keyDown(event)"/>
		 					<mx:DateField id="startDate" selectionColor="8376063"
		                		change="updateDate(event);updateTask(event, data)" 
		                		text = "{data.startDate.toString(Constants.FOUR_DIGIT_FORMAT)}"
						        firstDayOfWeek = "1" height = "0" width = "0" visible="false"
						          /> 
			        	</mx:Canvas>
				    </mx:HBox>
                </mx:Component>
            </mx:itemRenderer>
        </mx:AdvancedDataGridColumn>
        <!--  End Date Col -->
        <mx:AdvancedDataGridColumn 
        	resizable="false" 
        	id="gridColumnEndDate" 
        	headerStyleName="gridColumnHeader"
        	textAlign="center"       	
        	dataField = "Due Date" minWidth = "80" width="80" >
        	<mx:itemRenderer>
                <mx:Component>
                	<mx:HBox backgroundAlpha="{data.alphaCut}" click="outerDocument.setSelectionModeCell(data.position-1, 7)" backgroundColor="#eaeaea" horizontalScrollPolicy = "off" horizontalAlign="center">
	                	<mx:Script>
						  <![CDATA[
						  	  import mx.events.CalendarLayoutChangeEvent;
						      import com.salesforce.gantt.controller.Constants;
						      import com.salesforce.gantt.controller.Components;
						   
							  private function updateTask(event : Event, data : Object) : void
							  {
							  	if(event.currentTarget.text != '')
							  	{
							  		if(Components.instance.calendar.toString(data.endDate.date,"mm/dd/yyyy")!=event.currentTarget.text)
							  		{
								  		outerDocument.updateTask(data, event, Constants.END_DATE);
								  	}
							  	}
							  }
							  private function keyDown(event :KeyboardEvent):void
							  {
							  	if(event.keyCode==27)
							  	{
							  		endDate.close();
							  	}
							  }
							  private function updateDate(event : CalendarLayoutChangeEvent) : void {
								if (event.newDate != null) {
									var dateNew : Date = new Date(event.newDate.getFullYear(), event.newDate.month, event.newDate.date);
									endDate.selectedDate = event.newDate;
								}
							  }
							  
							  // Check If the user can edit the start date
							  private function editEndDate() : void {
							   	if(outerDocument.parentDocument.canModifySelectedTask || outerDocument.parentDocument.userProfilePermissions.canManage){
							  		endDate.open();
							  	}
							  }
							  
							  ]]>
							</mx:Script>
							<mx:Canvas click="outerDocument.setPaintIndices(data.position-1,7);">
								<mx:LinkButton id="endDateLink" alpha="0" textAlign="center" height="100%" width="100%"
									enabled="{data.isEditable()}" visible="{!data.isHidden}" fontWeight="{outerDocument.fontWeight(data)}" 
									 click="editEndDate()" label="{endDate.text}" keyDown="keyDown(event)"/>
			 					<mx:DateField id="endDate" selectionColor="8376063"
			                		change="updateDate(event);updateTask(event, data)" 
			                		text = "{data.endDate.toString(Constants.FOUR_DIGIT_FORMAT)}" 
							        firstDayOfWeek = "1" height = "0" width = "0" visible="false"
							          /> 
							</mx:Canvas>
					    </mx:HBox>
                    </mx:Component>
                </mx:itemRenderer>
            </mx:AdvancedDataGridColumn>
            <!--  % Completed  Col -->
        <mx:AdvancedDataGridColumn 
        		resizable="false" 
        		id="gridColumnCompleted" 
        		headerStyleName="gridColumnHeader" 
        		dataField = "% Complete" 
        		minWidth = "80"
        		textAlign="center" 
        		width="80">
            	<mx:itemRenderer>
                    <mx:Component>
                    	<mx:HBox  backgroundAlpha="{data.alphaCut}" click="outerDocument.setSelectionModeCell(data.position-1, 8)" backgroundColor="#eaeaea" horizontalAlign="center" horizontalScrollPolicy = "off">
                    		<mx:Script>
							  <![CDATA[  
							  import com.salesforce.gantt.controller.Constants;
							  private function updateTask(event : Event, data : Object) : void
							  {
							  								  	
							  	if(data.isEditable())
							  	{
							  		if(outerDocument.parentDocument.canModifySelectedTask || outerDocument.parentDocument.userProfilePermissions.canManage){
							  	
								  		if(event.currentTarget.value != data.completed)
								  		{
								  			outerDocument.hasUpdating = true;
								  			outerDocument.updateTask(data, event, Constants.COMPLETED);
								  		}
								  	}
							  	}
							  }
							  
							  
							  ]]>
							</mx:Script>
							<mx:Label text="{data.completed}" width="100%" 
								doubleClick="if(outerDocument.editableCompleted(data)){outerDocument.focusInTextWriting(8, completed.value.toString())}"
                        	    doubleClickEnabled="true" visible="{!data.isHidden}"/>
            				<mx:NumericStepper id="completed"
								styleName="textInputGrill" backgroundAlpha="0"	
								fontWeight="{outerDocument.fontWeight(data)}"	            		
			            		width="15" height = "100%" minimum="0" maximum="100" 
			            		enabled="{outerDocument.editableCompleted(data)}"
			            		click="updateTask(event, data);" 
			            		value="{data.completed}"  visible="{!data.isHidden}">
			            			<mx:upArrowSkin>@Embed('imgs/stepper_arrow_up.png')</mx:upArrowSkin>
			            			<mx:downArrowSkin>@Embed('imgs/stepper_arrow_down.png')</mx:downArrowSkin>
			            		</mx:NumericStepper>
					    </mx:HBox>
                    </mx:Component>
                </mx:itemRenderer> 
            </mx:AdvancedDataGridColumn>            
            <!--  Task Resources Col -->
        <mx:AdvancedDataGridColumn 
        		resizable="false" 
        		id="gridColumnResources"  
        		headerStyleName="gridColumnHeader"
        		dataField="Assignee"
        		width="100" 
        		minWidth="100"        		
        		textAlign="center"	>
            	<mx:itemRenderer>
                    <mx:Component>
        			   	<mx:HBox resize="outerDocument.drawSpriteCell()" backgroundAlpha="{data.alphaCut}" click="outerDocument.setSelectionModeCell(data.position-1, 10)" backgroundColor="#eaeaea" horizontalScrollPolicy = "off" width="100%" verticalScrollPolicy="off" 
        			   		doubleClick="outerDocument.addTaskResources(data)" doubleClickEnabled="true">
    			   			 <mx:LinkButton textDecoration="underline" alpha="0" textAlign="left" fontWeight="{outerDocument.fontWeight(data)}" 
			 					label="{data.concatTaskResouces(',')}" visible="{!data.isHidden}"/>
						</mx:HBox>
                    </mx:Component>
                </mx:itemRenderer>
            </mx:AdvancedDataGridColumn>           
        </mx:columns>       
    </mx:AdvancedDataGrid>
	<mx:Canvas toolTip="Create the first task" id="createFirstTask" visible="false" width="30" height="20" x="20" y="40" horizontalScrollPolicy = "off">		
	</mx:Canvas>
	<mx:Canvas id="writingCanvas" visible="false" height="28" backgroundColor="#ffffff" horizontalScrollPolicy = "off"  >
		<mx:TextInput id="writingText" alpha = "0"
            width = "100%"  styleName = "textInputGrill" height = "28"
            focusIn="drawSpriteCell();"
            keyDown="keyPressWriting(event)"
            focusOut="checkTaskFocusOut()"            
            shadowDistance="8" dropShadowEnabled="true" />        
	</mx:Canvas>
</mx:Canvas>