<mx:Panel
	 xmlns:mx = "http://www.adobe.com/2006/mxml"  styleName="barChartMainPanel"  verticalScrollPolicy="off"
	 mouseMove="parentDocument.barChart.outCanvasDataGrid(false)"
	 dropShadowEnabled="false">
<mx:Script>
	<![CDATA[
		import com.salesforce.gantt.view.print.FormPrintViewBarChart;
		import mx.printing.*;
		
		import mx.controls.Label;
		import mx.controls.TextArea;
		import mx.controls.Image;
		import mx.events.ModuleEvent;
		import flash.utils.getDefinitionByName;
		import com.salesforce.gantt.model.Calendar;
		import com.salesforce.gantt.controller.Constants;
		import com.salesforce.gantt.renderers.TaskRenderer;
	    import mx.containers.Panel; 	
	    import com.salesforce.gantt.model.UI;
	    import com.salesforce.gantt.model.UiTask;
	    import com.salesforce.gantt.model.Task;
	    import com.salesforce.gantt.model.TaskDate;
	    import com.salesforce.gantt.controller.Components;	
    	import mx.collections.ArrayCollection;
   	    
 		import mx.managers.DragManager;
 	    import mx.core.DragSource;
   	    import mx.events.DragEvent;
   	    import mx.containers.Canvas;
   	    
   	    import mx.effects.*;
   	    import mx.managers.CursorManager;
   	    
	    //[Bindable]
        //public var tasks : ArrayCollection;
    	[Bindable]
    	public var rangeDates : ArrayCollection = new ArrayCollection();
    	
    	//variables utilizadas para el drag and drop
    	private var xOffsetDrag : Number = 0;
	    private var yOffsetDrag : Number = 0;
	    
	    private var isDraging : Boolean = false;
	     
	    [Embed(source="../view/imgs/hand_up.png")]
	    private var cursorHandUp : Class;
	    
	    [Embed(source="../view/imgs/hand_down.png")]
	    private var cursorHandDown : Class;
	    
	    import mx.utils.GraphicsUtil;
	
        // Event handler function to display the scroll location.
     	public function setMaskProperties() : void
		{
			if(parentDocument.contentBarChartOverview.height==150)
			{
				getScaleHeightOverview();
				bars.addChild(createLargeMask('MaskOverview'));
			}
		}
		/*
		 * Retorna el tamanio de la escala equivalente a un dia
		 */
        public function getScaleOverview() : Number
		{
			return ((bars.width-5) / Components.instance.calendar.toDay(TaskDate.endDate));
		}
		/*
		 * Retorna el tamanio del rowHeight de la dataGridOverview
		 */
		public function getScaleHeightOverview() : void
		{
			//Al height del canvas que contiene el dataGrid del overview, le resto
			//1 pixel por cada tarea (equivalente al borde d cada tarea), y lo divido 
			//entre la cantidad de tareas
			
			var rowHeight : int = int((parentDocument.contentBarChartOverview.height) / parentDocument.taskList.visibleTasksList.length);
			//rowHeight--;
			if(rowHeight > 15)
			{
				rowHeight = 15;
			}
			bars.rowHeight = rowHeight;
		}
		/*
		 * Retorna el comienzo del recuadro(mask) de dataGridOverview
		 */
		private function getStartOverview() : int
		{
    		return -(this.parentApplication.mainView.barChart.datesCanvas.x) / UI.scale;
		}
		private function isOverArea(event : MouseEvent) : Boolean
	    {
	    	var xCenter : int = 0;
	    	var widthCenter : int = 0;
	    	var heightCenter : int = 0;
	    	var yCenter : int = 0;
	    	if(parentDocument.barChart.zoom < Components.instance.calendar.toDay(TaskDate.endDate))
        	{
        		var visibleYOfBarChart : Number = (this.parentApplication.mainView.barChart.barChartCanvas.y) / (UI.ROW_HEIGHT - 1.2);
	    		var visibleHeightOfBarChart : Number = (this.parentApplication.mainView.barChart.mainCanvas.height) / (UI.ROW_HEIGHT - 1.2);
				
				visibleYOfBarChart = visibleYOfBarChart + bars.verticalScrollPosition;
				
	    		var scale : Number = getScaleOverview();
				if(scale == 0)
				{
					scale = 1;
				}
	    		var desfasaje : int = 10;
        		xCenter = (getStartOverview() * scale) + desfasaje;
	    		widthCenter = (scale * parentDocument.barChart.zoom);
	    		heightCenter = (bars.rowHeight * visibleHeightOfBarChart);
	    		yCenter = -(bars.rowHeight * visibleYOfBarChart);

				var topeYCenter : int = 150 - heightCenter;
				if( yCenter > topeYCenter )
				{
					yCenter = topeYCenter;
				}
				var topeXCenter : int = this.parentApplication.width - widthCenter;
				if( xCenter > topeXCenter )
				{
					xCenter = topeXCenter;
				}
        	}

        	if(widthCenter<5)widthCenter=5;
        	if(heightCenter<5)heightCenter=5;
        	if( (event.stageX > xCenter && event.stageX < (xCenter + widthCenter)) &&
        		(event.localY > yCenter && event.localY < (yCenter + heightCenter)) )
        	{
        		return true;
        	}
        	else
        	{
        		return false;
        	}
	    }
        public function createLargeMask(name : String) : Shape
        {
        	var xCenter : int = 0;
    		var widthCenter : int = 0;
    		var heightCenter : int = 0;
    		var yCenter : int = 0;
	    		
			var xTop : int = 0;
			var yTop : int = 0;
			var widthTop : int = 0;
			var heightTop : int = 0;
			
			var xLeft : int = 0;
			var yLeft : int = 0;
			var widthLeft : int = 0;
			var heightLeft : int = 0;
			
			var xRight : int = 0;
			var yRight : int = 0;
			var widthRight : int = 0;
			var heightRight : int = 0;
			
			var xBottom : int = 0;
			var yBottom : int = 0;
			var widthBottom : int = 0;
			var heightBottom : int = 0;
        	if(parentDocument.barChart.zoom < Components.instance.calendar.toDay(TaskDate.endDate))
        	{
        		var visibleYOfBarChart : Number = ((this.parentApplication.mainView.barChart.barChartCanvas.y) / (UI.ROW_HEIGHT - 1.2) );
        		var visibleHeightOfBarChart : Number = 0;
        		
        		visibleYOfBarChart = visibleYOfBarChart + bars.verticalScrollPosition;
        		
        		if(this.parentApplication.mainView.barChart.mainCanvas.height < this.parentApplication.mainView.canvasContentAll.height)
        		{
        			visibleHeightOfBarChart = ((this.parentApplication.mainView.barChart.mainCanvas.height) / (UI.ROW_HEIGHT - 1.2) ); 
        		}
        		else
        		{
        			//esto es porque a veces demora en actualizarce el height del 'mainCanvas' y por lo tanto se le resta 150 que es el tamanio que tendria que actualizarce
        			visibleHeightOfBarChart = ((this.parentApplication.mainView.barChart.mainCanvas.height - 140) / (UI.ROW_HEIGHT - 1.2) );
        		}
				
				var scale : Number = getScaleOverview();
				/*if(scale == 0)
				{
					scale = 1;
				}*/
        		var desfasaje : int = 10;
        		xCenter = (getStartOverview() * scale) + desfasaje;
	    		widthCenter = (scale * parentDocument.barChart.zoom);
	    		heightCenter = (bars.rowHeight * visibleHeightOfBarChart);
	    		yCenter = -(bars.rowHeight * visibleYOfBarChart);
				
				if(heightCenter>140)
				{
					heightCenter = 124;
				}
				var topeYCenter : int = 140 - heightCenter;
				if( yCenter > topeYCenter )
				{
					yCenter = topeYCenter;
				}
				var topeXCenter : int = this.parentApplication.width - widthCenter;
				if(bars.maxVerticalScrollPosition>0){
					topeXCenter -= 20;
				}
				
				if( xCenter > topeXCenter )
				{
					xCenter = topeXCenter;
				}
				
				xTop = xCenter;
	    		yTop = 0;
	    		widthTop = widthCenter;
	    		heightTop = yCenter;
	    		
            	xLeft = 0;
	    		yLeft = 0;
	    		widthLeft = xCenter;
	    		heightLeft = 150;
	    		
	    		xRight = xCenter + widthCenter;
	    		yRight = 0;
	    		widthRight = this.parentApplication.width - (xCenter + widthCenter);
	    		heightRight = 150;
	    		
	    		if(bars.maxVerticalScrollPosition>0){
					widthRight -= 20;
				}
	    		
	    		xBottom = xCenter;
	    		yBottom = yCenter + heightCenter;
	    		widthBottom = widthCenter;
	    		heightBottom = 150 - yCenter + heightCenter;
        	}
        	
        	if(bars.getChildByName('MaskOverview') != null)
        	{
        		bars.removeChild(bars.getChildByName('MaskOverview'));
         	}
         	
         	// Create the Shape object.
        	var largeMask : Shape = new Shape();
			largeMask.name = name;
            
            //dibuja cuadrado con las lineas 
            largeMask.graphics.lineStyle(2, 0x0D4E6B, 1);
            largeMask.graphics.moveTo(xCenter, yCenter);
            largeMask.graphics.lineTo(xCenter, yCenter);
            largeMask.graphics.lineTo(xCenter + widthCenter, yCenter);
            largeMask.graphics.lineTo(xCenter + widthCenter, yCenter + heightCenter );
            largeMask.graphics.lineTo(xCenter, yCenter + heightCenter);
            largeMask.graphics.lineTo(xCenter, yCenter);
            
            //se crean 4 rectangulos
            // The blue mask over the overview
            largeMask.graphics.lineStyle(1, 0xeeecd1, .0);
            largeMask.graphics.beginFill(0x0D4E6B, .1);
            //top rectangle
            largeMask.graphics.drawRoundRect(xTop, yTop, widthTop, heightTop, 0);
           
            //left rectangle
            largeMask.graphics.drawRoundRect(xLeft, yLeft, widthLeft, heightLeft, 0);
           
            //right rectangle
            largeMask.graphics.drawRoundRect(xRight, yRight, widthRight, heightRight, 0);   
           
            //bottom rectangle
            largeMask.graphics.drawRoundRect(xBottom, yBottom, widthBottom, heightBottom, 0);
           
            largeMask.graphics.endFill();
			
            // Return the mask.
            return largeMask;
        }
        
        
       private function panelHandler(event : Event) : void
       {
  		  barChartCanvas.addEventListener(MouseEvent.MOUSE_DOWN, mouseMoveHandler);
  		  barChartCanvas.addEventListener(MouseEvent.MOUSE_UP, clickHandler);
   	   }
   	   private function clickHandler(event : MouseEvent) : void
   	   {
   	   		isDraging = false;
   	   		setCursor();
   	   }
   	   private function mouseMoveHandler(event : MouseEvent) : void
   	   {
			trace('You are dragging the sprite!');
   	   		isDraging = true;
   	   		setCursor();
			var dragInitiator : Canvas = Canvas(event.currentTarget.parent);
			var dragSource : DragSource = new DragSource();
			dragSource.addData(event.currentTarget.parent,  'canvas');
			xOffsetDrag = event.currentTarget.mouseX;
			yOffsetDrag = event.currentTarget.mouseY;
			var canvas : Canvas = new Canvas();
			canvas.visible = false;
			
			DragManager.doDrag(dragInitiator, dragSource, event, canvas, -15, -15, 1.00);
       } 
       private function doDragEnter(event : DragEvent) : void
   	   {
   	   		if(isOverArea(event))
   	   		{
         		DragManager.acceptDragDrop(Canvas(event.target));
         		isDraging = true;
   	   			setCursor();
         	}
         	else
         	{
         		xOffsetDrag = event.currentTarget.mouseX;
				yOffsetDrag = event.currentTarget.mouseY;
         	}
         	if(parentDocument.barChart.taskIdClicked=='')
     		{
     			parentDocument.barChart.hideObjectDraging();
     		}
   	   }
   	   private function doDragOver(event : DragEvent) : void
       {
			//trace('You are dragging and the position is:'+event);
       		var xCenter : int = 0;
    		var widthCenter : int = 0;
    		var heightCenter : int = 0;
    		var yCenter : int = 0;
    		
    		isDraging = true;
        	if(parentDocument.barChart.zoom < Components.instance.calendar.toDay(TaskDate.endDate))
        	{
	       		var visibleYOfBarChart : Number = ((this.parentApplication.mainView.barChart.barChartCanvas.y) / (UI.ROW_HEIGHT - 1.2) );
	       		var visibleHeightOfBarChart : Number = 0;
	    		if(this.parentApplication.mainView.barChart.mainCanvas.height < this.parentApplication.mainView.canvasContentAll.height)
	    		{
	    			visibleHeightOfBarChart = ((this.parentApplication.mainView.barChart.mainCanvas.height) / (UI.ROW_HEIGHT - 1.2) ); 
	    		}
	    		else
	    		{
	    			//esto es porque a veces demora en actualizarce el height del 'mainCanvas' y por lo tanto se le resta 150 que es el tamanio que tendria que actualizarce
	    			visibleHeightOfBarChart = ((this.parentApplication.mainView.barChart.mainCanvas.height - 150) / (UI.ROW_HEIGHT - 1.2) );
	    		}
	    		
	    		var scale : Number = getScaleOverview();
				if(scale == 0)
				{
					scale = 1;
				}
				
	    		var desfasaje : int = 10;
	    		xCenter = (getStartOverview() * scale) + desfasaje;
	    		widthCenter = (scale * parentDocument.barChart.zoom);
	    		heightCenter = (bars.rowHeight * visibleHeightOfBarChart);
	    		yCenter = -(bars.rowHeight * visibleYOfBarChart);
				
				var finalX : int = 0;
   	   	  		var finalY : int = 0;
   	   	  
   				var verticalScrollPosition : int = bars.verticalScrollPosition;
   	   	  
				var moveYInScaleBarChartOverview : int = event.currentTarget.mouseY - yOffsetDrag;
				var topeYCenter : int = 150 - heightCenter;
				if( yCenter < topeYCenter || moveYInScaleBarChartOverview < 0)
				{
					var moveYInScaleBarChart : int = moveYInScaleBarChartOverview * UI.ROW_HEIGHT / bars.rowHeight;
					//var moveY : int = (moveYInScaleBarChart) / UI.ROW_HEIGHT;
			   		//if(moveY != 0)//si es multiplo de UI.ROW_HEIGHT
			   		//{
					//	parentDocument.barChart.moveBarChartVertically(-(moveY * UI.ROW_HEIGHT));
					//	yOffsetDrag = event.currentTarget.mouseY;
			   		//}
			   		var moveY : int = (moveYInScaleBarChart);
			   		
			   		if(moveY != 0)//si es multiplo de UI.ROW_HEIGHT
			   		{
		//				parentDocument.barChart.moveBarChartVertically(-(moveY));
						finalY = -moveY;
						yOffsetDrag = event.currentTarget.mouseY;
			   		}
				}
				var moveXInScaleBarChartOverview : int = event.currentTarget.mouseX - xOffsetDrag;
				var topeXCenter : int = this.parentApplication.width - widthCenter;
				if( xCenter < topeXCenter || moveXInScaleBarChartOverview < 0)
				{
	       			var moveXInScaleBarChart : int = moveXInScaleBarChartOverview * UI.scale / scale;
					finalX = -moveXInScaleBarChart;
					xOffsetDrag = event.currentTarget.mouseX;
				}
				parentDocument.barChart.moveBarChartVerticallyAndHorizontally(finalY,finalX);
        	}
			setMaskProperties();
			parentDocument.taskList.drawSpriteCell();
   	    }
   	    
   	    var verticalScrollPositionAnt : int = 0;
   	    private function moveBarCharVertically() : void 
   	    {
   	    	var verticalScrollPosition : int = bars.verticalScrollPosition;
   	    	var diffScrolling : int = verticalScrollPosition - verticalScrollPositionAnt;
   	    	if(diffScrolling!=0){
	   	    	var moveYInScaleBarChart : int = diffScrolling * UI.ROW_HEIGHT / bars.rowHeight;
		   		if(moveYInScaleBarChart != 0)//si es multiplo de UI.ROW_HEIGHT
		   		{
					//yOffsetDrag = event.currentTarget.mouseY;
					parentDocument.barChart.moveBarChartVerticallyAndHorizontally(-moveYInScaleBarChart,0);
		   		}
	   	    	verticalScrollPositionAnt=verticalScrollPosition;
	   	    }
   	    }
   	    public function loadDates() : void
	    {
	    	var tempDates : ArrayCollection = new ArrayCollection();
	    	var endDateView : int = Components.instance.calendar.toDay(TaskDate.endDate);
			for(var i : int = 0; i < endDateView; i++)
			{
				var tempDate : Date = Components.instance.calendar.add(TaskDate.startDate, i)
				if(tempDate.getDate()==1)
				{
					if(tempDate.hours != 00)
					{
						tempDate = Components.instance.calendar.addHours(tempDate,-tempDate.hours);
					}
					tempDates.addItem(tempDate.getTime());
				}
			}
			//canvLines.dataProvider = tempDates;
			rangeDates.list = tempDates;
	    }
	    public function positionDate(date : Date) : int
	    {
	    	for(var i : int = 0; i < rangeDates.length; i++)
			{
				var rangeDate : Date = new Date(rangeDates.getItemAt(i));
				if(date.getTime()==rangeDate.getTime())
				{
					return i;
				}
			}
			return 0;
	    }
	    private function showCursor(event : MouseEvent) : void
	    {
	    	if(isOverArea(event))// && !isOverImage(event))
	    	{
				setCursor();
        	}
        	else
        	{
        		CursorManager.removeCursor(CursorManager.currentCursorID);
        	}
	    }
		private function setCursor() : void
		{
			CursorManager.removeAllCursors();
			//CursorManager.removeCursor(CursorManager.currentCursorID);
			//CursorManager.setCursor(cursorHandUp);
			
			if(!isDraging)
			{
				CursorManager.setCursor(cursorHandUp,2.0,-5,-5);
			}
			else
			{
				CursorManager.setCursor(cursorHandDown,2.0,-5,-5);
			}
		}
	]]>
</mx:Script>
<mx:Style source="css/BarChartOverview.css"/>
<mx:Canvas id="mainCanvas" height="100%" width="100%"  horizontalScrollPolicy="off" verticalScrollPolicy="off"
	creationComplete = "panelHandler(event);"
	dragEnter = "doDragEnter(event);" 
	dragOver = "doDragOver(event);"
	dragDrop="isDraging = false;setCursor();parentDocument.barChart.showObjectDraging(true);"
	dragExit="isDraging = false;parentDocument.barChart.showObjectDraging(true);"
	mouseMove="showCursor(event)" >
	<mx:Canvas styleName="canvasDataGrids" id="barChartCanvas" y="0" height="100%" width="100%" verticalScrollPolicy="off" backgroundAlpha="0">
		<mx:Canvas height="17" width="100%" bottom="0" backgroundColor="0x004F6D" right="0">
    	</mx:Canvas>	
	<mx:DataGrid styleName="gridDatesLines" id="canvLines" selectable="false" alpha=".3" 
			rowHeight="1" width="100%" height="30" dataProvider="{rangeDates}" x="0" headerHeight="0" >
			<mx:columns>
				<mx:DataGridColumn width="0"   
					itemRenderer="com.salesforce.gantt.renderers.DatesLineRendererOverview"
					/>
			</mx:columns>
		</mx:DataGrid>
		<!-- The overview bars  -->	
		<mx:DataGrid selectable="false" 
									styleName="BarChartOverviewGridTaskRenderer" 
									id="bars" 
									width="100%"
			 						rowHeight="0" 
			 						horizontalGridLines="false" 
			 						dataProvider="{parentDocument.taskList.visibleTasks}" 
			 						height="100%" 
			 						x="0"			 						
			 						headerHeight="0" 
			 						verticalScrollPolicy="off"
			 						scroll="moveBarCharVertically()">
			<mx:columns>
				<mx:DataGridColumn width="0"	itemRenderer="com.salesforce.gantt.renderers.TaskRendererOverview"	/>
			</mx:columns>
		</mx:DataGrid>
	</mx:Canvas>
</mx:Canvas>
</mx:Panel>