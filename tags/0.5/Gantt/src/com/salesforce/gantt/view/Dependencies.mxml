<?xml version = "1.0" encoding = "utf-8"?>
<mx:Panel xmlns:mx = "http://www.adobe.com/2006/mxml"	  
	width="470"	horizontalGap="0" headerHeight="0" height="400"
	horizontalAlign="left"
	x="0" y="0" left="0" 
	borderThicknessTop="0" borderThicknessLeft="0" borderThicknessRight="0" borderThicknessBottom="0"
	dropShadowEnabled="false" >
<mx:Script>
	<![CDATA[
	import mx.formatters.Formatter;
	import mx.formatters.SwitchSymbolFormatter;
	import com.salesforce.gantt.controller.Constants;
	import mx.events.CalendarLayoutChangeEvent;
	import mx.controls.Alert;
	import com.salesforce.gantt.model.Dependency;
	import com.salesforce.gantt.model.Task;
	import com.salesforce.gantt.model.UiTask;
	import com.salesforce.gantt.controller.Components;
	import com.salesforce.gantt.model.UiTask;
	import mx.collections.ArrayCollection;
	import mx.managers.PopUpManager;
	import com.salesforce.gantt.model.Dependency;
	import com.salesforce.gantt.controller.Constants;
	import flash.events.Event;
	import flash.events.EventDispatcher;
	
	[Bindable]
	public var selectedTask : UiTask;
	[Bindable]
	public var parentTasks : ArrayCollection = new ArrayCollection();
	[Bindable]
    public var tasks : ArrayCollection;

    public var selectedTaskDependencies : ArrayCollection = new ArrayCollection();
    [Bindable]
    public var selectedTaskDependenciesUpdated : ArrayCollection = new ArrayCollection();
   
   /*
	* Retorna el array con los lagUnit posibles
	*/
	public function lagUnitLabel() : Array
	{
		return ['Hours', 'Days', 'Weeks'];
	}
	/*
	* Retorna el array con los lagType posibles
	*/
	public function lagTypeLabel() : Array
	{
		return ['start to finish', 'finish to start', 'start to start', 'finish to finish'];
	}
	
	/*
	* Edita una dependencia de una tarea
	*/
	public function updateDependency(event : Event, object : Object, option : String) : void
	{
		var newDependency : Dependency = Dependency(object);
		
		switch(option)
		{
			case 'lagType':
				newDependency.lagType = event.currentTarget.selectedIndex + 1;
				break;
			case 'lagTime':
			 	newDependency.lagTime = event.currentTarget.value ;
				break;
			case 'lagUnit':
				newDependency.lagUnits = event.currentTarget.selectedIndex + 1;
				break;
			case Constants.PARENT:
				var parent : Task = Components.instance.tasks.getTask(event.currentTarget.selectedItem.data);
				newDependency.task = parent;
				break;
		}				
		/*if (newDependency.task != null)
		{
			setParentTasks();
			tasks.refresh();
		}
		else
		{
		  Alert.show("You have to select a task", "Error");
		}*/	
		
		setParentTasks();
	}
	/*
	* Borra una dependecia de una tarea
	*/
	public function deleteDependency(object : Object) : void
	{
		var dependency : Dependency = Dependency(object);
		if (dependency.task != null)
		{
			for (var i : int = 0; i < selectedTaskDependenciesUpdated.length; i++)
			{
				var oldDependency : Dependency = ((Dependency)(selectedTaskDependenciesUpdated.getItemAt(i, 0.0)));
				if (oldDependency.id == dependency.id)
				{
					selectedTaskDependenciesUpdated.removeItemAt(i);
					parentGrid.setFocus();
				}
			}
		   setParentTasks();
		   // tasks.refresh();
		   dispatchEvent(new Event(Constants.TASK_SELECT));
		}
		else
		{
			Alert.show("To delete you must select a dependency", "Error");
		}
	}
	
	/*
	* Actualiza el array con las tareas padres(padres de dependencia) posibles para
	* cargar el combo 
	*/
	public function setParentTasks() : void
	{
		 
		parentTasks = Components.instance.tasks.possibleParentTasks(Task(Components.instance.tasks.selectedTask));	
		
		
		//
		//si esta en selectedTaskDependenciesUpdated la borra de parentTasks  <----------- !!!
		//
		for(var i : int = parentTasks.length -1; i >= 0 ; i--)
    	{
    		var object : Object = Object(parentTasks.getItemAt(i));
    		
    		if(taskInArray(object.data, selectedTaskDependenciesUpdated)!=null)
    		{
    			parentTasks.removeItemAt(i);
    		}
    		
    		
    	}
    	
    	/*
    	    	
    	for(var i : int = 0; i < selectedTask.dependencies.length; i++){
    		var dependency : Dependency = selectedTask.dependencies[i];
    		parentTasks.addItem({ label: dependency.task.name, data: dependency.task.id });
    	}
    	
    	*/
    	
    	
	}
	
	/*
	* Agrega una nueva row en la grilla
	*/
	public function addNewDependency() : void
	{	
		var dependency : Dependency = new Dependency(null, 2, 0, 1);		
		selectedTaskDependenciesUpdated.addItem(dependency);	
	}
		
	/**
	 * Set up the initial array of dependencies
	 * */	
	
	public function buildDependencies(): void{
		
		selectedTaskDependencies.removeAll();
		selectedTaskDependenciesUpdated.removeAll();
		setParentTasks();
		
		trace('This are the selected task dependencies'+ selectedTask.dependencies);
		
		for(var i : int = 0; i < selectedTask.dependencies.length; i++){
			var dependency : Dependency = selectedTask.dependencies[i];			
			selectedTaskDependenciesUpdated.addItem(dependency);
			selectedTaskDependencies.addItem(dependency);
			trace('This are the selected task lagtime'+ dependency.lagTime);
		}		
		
		selectedTaskDependencies.refresh();
		selectedTaskDependenciesUpdated.refresh();
		
		if(selectedTask.dependencies.length == 0){
			addNewDependency();			
		}
		
		//selectedTaskDependenciesUpdated.addItem(dependency);
	}
		
	
	/**
	 * Busca una dependencia en un array por id y la reotorna
	 * */
	private function taskInArray(id : String, array : ArrayCollection) : Dependency
	{
		for (var i : int = 0; i < array.length; i++)
	    {
	    	if(Dependency(array.getItemAt(i)).task!=null)
	    	{
		      	if(id == Dependency(array.getItemAt(i)).task.id)
		      	{
		      		return Dependency(array.getItemAt(i));
		      	}
		    }
	    }
	    return null;
	}
	/*
	* Borra las dependecnias
	*/
	private function deleteDependencies() : void
	{
		for (var i : int = selectedTaskDependencies.length -1; i >= 0; i--)
	    {
    		var dependency : Dependency = Dependency(selectedTaskDependencies.getItemAt(i));
    		if(dependency.task != null){
    		// trace('The task id of the dependency: '+dependency.task.id);
		      	if(!taskInArray(dependency.task.id, selectedTaskDependenciesUpdated))
		      	{
		      		trace('Deleting a dependency:'+dependency.task);
		      		Components.instance.controller.deleteDependency(dependency,Components.instance.tasks.selectedTask);
		      	}
	    	}
	    }
	}
	/*
	* Modifica o agrega ddependencias luego de presionar el boton save
	*/
	public function saveDependencies () : void
	{
		
		trace('the current task dependencies: ' + selectedTaskDependencies);
		// trace('the updated task dependencies: ' + selectedTaskDependenciesUpdated);
		
		
		deleteDependencies();
		
		var oldDependency : Dependency = null;
		var cloneTask : Task = selectedTask.clone();
		
		for (var i : int = 0; i < selectedTaskDependenciesUpdated.length; i++)
		{
			  var d : Dependency = ((Dependency)(selectedTaskDependenciesUpdated.getItemAt(i)));
			  
			  trace('Adding a dependency:' + d.task);
		      
		      var newDependency : Dependency = new Dependency(	d.task,
		      													d.lagType,
		      													d.lagTime,
		      													d.lagUnits,
		      													d.id);
		      if(newDependency.task != null)												
		      {
			      oldDependency = taskInArray(newDependency.task.id, selectedTaskDependencies);
			      if(oldDependency!=null)//edito
			      {
			      	Components.instance.controller.updateDependency(newDependency, oldDependency);
			      } 
			      else//agrego
			      {
			      	Components.instance.controller.addDependency(newDependency, cloneTask, false);

			      }
		      }
	      }
		// Filter
		dispatchEvent(new Event(Constants.TASKS_FILTERS));
		dispatchEvent(new Event(Constants.TASK_SELECT));
		dispatchEvent(new Event(Constants.TASK_CENTER)); 
		// Rerender the mainview! 
		parentApplication.mainView.filter();
		//parentDocument.barChart.centerSelected();
		//parentDocument.barChart.paintSelect();	
		parentDocument.closeEditTaskOverlay();
		  
		  														        
	}
	]]>
</mx:Script>

<mx:Style source="css/Dependencies.css"/>

<mx:VBox height="225" width="470" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	<mx:Spacer height="10" width="100%" />
	<mx:DataGrid
		id="parentGrid" 
		rowHeight="23" 
		dataProvider="{selectedTaskDependenciesUpdated}"  
		variableRowHeight="false" 
		sortableColumns="false"
		draggableColumns="false"
		dragMoveEnabled="false" 
		width="460" 
		height="205" 
		horizontalGridLines="false"
		verticalGridLines="false"	
		selectionColor="#ffffff"
		styleName="dependenciesGrid"
		verticalScrollPolicy="auto"
		borderStyle="none"
		resizableColumns="false"
		headerStyleName="gridheaders"
		headerSeparatorSkin="@Embed(source='imgs/blank_pix.png')"
		headerBackgroundSkin="@Embed(source='imgs/blank_pix.png')"
		headerColors="[white, white]"
		rollOverColor="#ffffff">	
		<mx:columns>
			<!-- Action Grid Col -->
	        <mx:DataGridColumn  headerStyleName="gridheaderActions" width = "45" id="gridColumnTaskResourceDelete" headerText="Action" paddingLeft="0" paddingRight="0" >
		        <mx:itemRenderer >
		            <mx:Component>
			            <mx:HBox horizontalScrollPolicy = "off" verticalAlign="middle" horizontalAlign="center" horizontalGap="0" verticalGap="0">		            	
			            	<mx:Label text="Delete" color="0x0F6CB0" textDecoration="underline" click="outerDocument.deleteDependency(data)" useHandCursor="true" buttonMode="true" mouseChildren="false" />		            	
			            </mx:HBox>
		            </mx:Component>
		        </mx:itemRenderer>
	        </mx:DataGridColumn>        
	        <!-- Name Grid Col -->       
		    <mx:DataGridColumn headerStyleName="gridheaders" dataField = "Name" width = "150" >
		        <mx:itemRenderer>
		            <mx:Component>
			            <mx:HBox creationComplete="init()" horizontalScrollPolicy = "off" horizontalGap="0" verticalGap="0" width="150" height="19">
			            		<mx:Script>
								  <![CDATA[        
								  import com.salesforce.gantt.model.Dependency;
								  import com.salesforce.gantt.model.Task;
								  import com.salesforce.gantt.controller.Constants;
								  import mx.collections.ArrayCollection;
								  
								  private function clickLabel() : void
								  {
								  	lbl.visible = false;
								  	
								  	lbl.width = 0;							  
								  	cbo.visible = true;
								  	
								  	cbo.dataProvider=parentTask();
								  	cbo.text = "Choose a task";
								  }
								  
								  private function parentTask() : ArrayCollection
								  {
								  		var parentTask : ArrayCollection = outerDocument.parentTasks;
								  		if(data.task!=null)
								  		{
								  			var object : Object = new  Object();
							    			object.label = data.task.name;
							    			object.data = data.task.id;
								  			parentTask.setItemAt(object,0); 
								  		}
								  		return parentTask;
								  }
								  
								  private function getIndexParent(idTask : String) : int
								  {
								  		for(var i : int = 0; i<outerDocument.parentTasks.length; i++)
								  		{
								  			var task : Object = Object(outerDocument.parentTasks.getItemAt(i));
								  			if(idTask == task.data)
								  			{
								  				return i;
								  			}
								  		}
								  		return 0;
								  }
								  
								  private function changeCombo(event : Event, data : Object) : void
								  {
								  	outerDocument.updateDependency(event, data, Constants.PARENT);
								  	lbl.visible = true;
								  	
								  	lbl.width = 231;
								  	
								  	cbo.visible = false;
								  	
								  }
								  
								  /**
								  * If the task dependency is null , call clicklabel
								  * */
								  
								  private function init() : void
								  {
								  	if(data.task == null)
								  	{
								  		clickLabel();
								  	}
								  }
								  ]]>
								</mx:Script>
							
							<mx:Grid horizontalGap="0" width="150" height="19" horizontalScrollPolicy="off">
								<mx:GridRow horizontalAlign="left"  >
									<mx:GridItem horizontalAlign="left"   visible="true">
										<mx:Canvas 
											backgroundImage="@Embed('imgs/name_combo_skin_dependency.png')"
											backgroundAttachment="fixed"
											width="150" height="19" 
											horizontalScrollPolicy="off" verticalScrollPolicy="off" 
											x="0" y="0" top="0" left="0">
											<mx:Label id="lbl" click="clickLabel()" visible="true" width = "150" height = "19" text = "{data.task.name}" x="0" y="0" top="0" left="5"/>
											<mx:ComboBox
												left="2"
							            		id="cbo"  
							            		visible="false" 
							            		width="146"	  
										 		color="#000000"					 		
										 		borderColor="#CBCBCB"									 		
										 		iconColor="#CBCBCB" 
										 		themeColor="#000000"
										 		alpha="1.0" 
										 		fillAlphas="[1.0, 1.0, 1.0, 1.0]" 
										 		fillColors="[#FFFFFF, #FFFFFF]"
						  						opaqueBackground="0xFFFFFF"
										 		height="19"
										 		selectionColor="0xFFFFFF"
										 		upSkin="@Embed('imgs/name_combo_skin_dependency.png')"
										 		downSkin="@Embed('imgs/name_combo_skin_dependency.png')"
										 		overSkin="@Embed('imgs/name_combo_skin_dependency.png')"									 		
										    	rollOverColor="0xF9F8CD"
										    	editable="false"
										 		cornerRadius="0"					 		
										 		focusRoundedCorners="0"		            		  
							            		change="changeCombo(event, data)" dataProvider="{outerDocument.parentTasks}"
							            		selectedIndex="{data.task.name-1}"
							            		textIndent="0"
				            					paddingLeft="0"
							            		textDecoration="none"
							            		fontWeight="normal"
							            		text = "{data.task.name}" />	
										</mx:Canvas>
											
									</mx:GridItem>
								</mx:GridRow>
							</mx:Grid>
	        			</mx:HBox>
		            </mx:Component>
		        </mx:itemRenderer>
	        </mx:DataGridColumn> 
	        
	        <!-- Lag Grid Col -->
	        <mx:DataGridColumn headerStyleName="gridheaders" dataField = "Lag" width = "40" >
		        <mx:itemRenderer>
		            <mx:Component>
			            <mx:HBox 
			            	horizontalScrollPolicy = "off" 
			            	horizontalGap="0" 
			            	verticalGap="0">
			            	<mx:Canvas 
			            		borderColor="#CBCBCB"
			            		borderStyle="solid"
			            		width="40"
			            		height="19"
			            		x="0" y="0" top="0" left="0">
				            	<mx:NumericStepper value="{data.lagTime}"
				            		 keyUp="if(event.keyCode==13){outerDocument.parentGrid.setFocus();outerDocument.updateDependency(event, data,'lagTime')}"
				            		 click="outerDocument.updateDependency(event, data,'lagTime')" 
				            		 width="40" cornerRadius="0" 
				            		 styleName = "NumericStepperText" 
				            		 backgroundAlpha=".0"
				            		 textIndent="0"
				            		 paddingLeft="0"		
				            		 		            		 
				            		 textDecoration="none"
								     fontWeight="normal"
				            		 minimum="0"		            		
				            		 maximum="100"       		 >
		       		 			 	<mx:upArrowSkin>@Embed('imgs/stepper_arrow_up.png')</mx:upArrowSkin>
					            	<mx:downArrowSkin>@Embed('imgs/stepper_arrow_down.png')</mx:downArrowSkin>
	       		 			 </mx:NumericStepper>	
			            	</mx:Canvas>		            	
	        			</mx:HBox>
		            </mx:Component>
		        </mx:itemRenderer>
	        </mx:DataGridColumn> 
	        
	        <!-- Unit Grid Col --> 
	        <mx:DataGridColumn headerStyleName="gridheaders" dataField = "Unit" width = "55" >
		        <mx:itemRenderer>
		            <mx:Component>
			            <mx:HBox horizontalScrollPolicy = "off" horizontalGap="0" verticalGap="0">		            	
			            	<mx:ComboBox 
			            		cornerRadius="0" 
			            		borderThickness="0"   
			            		width="50" height="19" 
			            		selectedIndex="{data.lagUnits-1}" 
			            		change="outerDocument.updateDependency(event, data,'lagUnit')" 
			            		dataProvider="{outerDocument.lagUnitLabel()}"
			            		rollOverColor="0xF9F8CD" 
			            		color="#000000"
						 		borderColor="#CBCBCB"
						 		upSkin="@Embed('imgs/unit_combo_skin_dependency.png')"
						 		downSkin="@Embed('imgs/unit_combo_skin_dependency.png')"
						 		overSkin="@Embed('imgs/unit_combo_skin_dependency.png')"
						 		iconColor="#CBCBCB" 
						 		themeColor="#000000"
						 		alpha="1.0" 
						 		textIndent="0"
				            	paddingLeft="0"	
						 		textDecoration="none"
							    fontWeight="normal"
						 		fillAlphas="[1.0, 1.0, 1.0, 1.0]" 
						 		fillColors="[#FFFFFF, #FFFFFF]"					 		
		  						opaqueBackground="0xFFFFFF"					 		
						 		selectionColor="0xFFFFFF" />
	        			</mx:HBox>
		            </mx:Component>
		        </mx:itemRenderer>
	        </mx:DataGridColumn> 
	        
	        <!-- Type Grid Col -->
	        <mx:DataGridColumn headerStyleName="gridheaders" dataField = "Type" width = "100"  >
		        <mx:itemRenderer>
		            <mx:Component>
			            <mx:HBox horizontalScrollPolicy = "off" horizontalGap="0" verticalGap="0">
			            	<mx:ComboBox		            		
			            		 borderThickness="0" 
			            		 cornerRadius="0" 
			            		 width="100" 
			            		 height="19" 
			            		 selectedIndex="{data.lagType-1}" 
			            		 change="outerDocument.updateDependency(event, data,'lagType')" 
			            		 dataProvider="{outerDocument.lagTypeLabel()}" 
			            		 rollOverColor="0xF9F8CD"
			            		 color="#000000"
						 		borderColor="#CBCBCB"
						 		iconColor="#CBCBCB" 
						 		themeColor="#000000"
						 		alpha="1.0" 
						 		textIndent="0"
				            	paddingLeft="0"
						 		textDecoration="none"
							    fontWeight="normal"
						 		upSkin="@Embed('imgs/type_combo_skin_dependency.png')"
						 		overSkin="@Embed('imgs/type_combo_skin_dependency.png')"
						 		downSkin="@Embed('imgs/type_combo_skin_dependency.png')"
						 		fillAlphas="[1.0, 1.0, 1.0, 1.0]" 
						 		fillColors="[#FFFFFF, #FFFFFF]"
		  						opaqueBackground="0xFFFFFF"					 		
						 		selectionColor="0xFFFFFF"/>
	        			</mx:HBox>
		            </mx:Component>
		        </mx:itemRenderer>
	        </mx:DataGridColumn> 
	    </mx:columns>
	</mx:DataGrid>	
</mx:VBox>
<mx:VBox height="20" width="470">
	<mx:Grid horizontalGap="0">
		<mx:GridRow>
			<mx:GridItem paddingLeft="10" paddingTop="3">
				<mx:Image 
					id="addAssignee_icon" 
				 	source="@Embed(source='imgs/add_assignee_icon.png')"  
				 	useHandCursor="true" buttonMode="true" mouseChildren="false"	/>			
			</mx:GridItem>
			<mx:GridItem paddingTop="3">
				<mx:Label 
					text="Add New Task Link"
					textDecoration="underline"					
					click="addNewDependency();"
					fontSize="11"/>
			</mx:GridItem>
		</mx:GridRow>
	</mx:Grid>
</mx:VBox>
<!-- 
	Save and Cancel buttons
-->
<mx:VBox height="50" width="470">
	<mx:Canvas 
	top="5"
	width="470"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	x="0" >
		<mx:VBox width="470" height="1" paddingBottom="5">
			<mx:Image source="@Embed(source='imgs/line_hr.png')" />	
		</mx:VBox>	
		<mx:VBox horizontalAlign="center" width="100%">
			<mx:Grid  verticalGap="5">
				<mx:GridRow>
					<mx:GridItem height="9" verticalAlign="middle" horizontalAlign="center" colSpan="2"></mx:GridItem>					
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem backgroundColor="0x7D8DA2" width="65" height="27" verticalAlign="middle" horizontalAlign="center">
						<mx:Label id="saveBtn" 	useHandCursor="true"  buttonMode="true"  mouseChildren="false" text="Save" color="white" click="parentDocument.SaveTask()" fontSize="12" fontWeight="bold"  fontFamily="Arial" />						
					</mx:GridItem>
					<mx:GridItem backgroundColor="0x999999"  width="55" height="27" verticalAlign="middle" horizontalAlign="center">
						<mx:Label id="cancelBtn" click="parentDocument.closeEditTaskOverlay();" useHandCursor="true" buttonMode="true"  mouseChildren="false"  text="Cancel" color="white" fontSize="12" fontWeight="bold"  fontFamily="Arial" />
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
		</mx:VBox>
	</mx:Canvas>
</mx:VBox>
</mx:Panel>