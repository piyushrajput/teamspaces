<?xml version = "1.0" encoding = "utf-8"?>
<mx:Panel xmlns:mx = "http://www.adobe.com/2006/mxml" width="470" 
	borderThickness="0" borderThicknessBottom="0" borderThicknessLeft="0" 
	borderThicknessRight="0" borderThicknessTop="0" headerHeight="0"
	horizontalScrollPolicy="off" 
	height="400" dropShadowEnabled="false" verticalScrollPolicy="off"
	mouseOver="parentDocument.barChart.defaultCursor();"	
	>
<mx:Script> 
	<![CDATA[
	import flash.trace.Trace;
	import mx.formatters.Formatter;
	import mx.formatters.SwitchSymbolFormatter;
	import mx.events.CalendarLayoutChangeEvent;
	import mx.events.CloseEvent;
	import com.salesforce.gantt.model.User;
	import com.salesforce.gantt.model.TaskDate;
	import mx.controls.Alert;
	import com.salesforce.gantt.model.Dependency;
	import com.salesforce.gantt.controller.Components;
	import com.salesforce.gantt.model.UiTask;
	import com.salesforce.gantt.model.Task;
	import com.salesforce.gantt.model.Schedule;
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import mx.collections.ArrayCollection
    import com.salesforce.gantt.controller.Constants;
     
    [Bindable]
    public var selectedTask : UiTask = null;//Components.instance.tasks.selectedTask;
	[Bindable]
	public var schedule : Schedule = Components.instance.session.schedule;
	
	private var tasksDependency : ArrayCollection = new ArrayCollection();
	
	var todayDate : Date = new Date();	
	


	  public function todayToString () : String
     {
     	var month : int = todayDate.getMonth();
		var concatMonth : String = "";
		if(month<10)
		{
			concatMonth = "0";
		}
		var concatDay : String = "";
		if(todayDate.getDate()<10)
		{
			concatDay = "0";
		}
		
		return concatMonth + month.toString() + "/" + concatDay + todayDate.getDate().toString() + "/" + todayDate.getFullYear().toString();
 	 		
     } 
	     
	var todayDateString : String = todayToString();

	
	/*
	* Valida que se halla presinado enter para editar la tarea
	*/
	private function validateEnter(event : KeyboardEvent) : void
	{
		if(event.keyCode == 13)
		{
			formTaskEdit.setFocus();
			updateTask(Constants.DURATION);
		}
	}
	/*
	* Dispara el evento para cambiar la tarea seleccionada
	*/
	private function selectTask(task : Task) : void
	{
		if(task != null)
		{
			Components.instance.tasks.select(task.id);
			dispatchEvent(new Event(Constants.TASK_SELECT));
		}
	}
	/*
	* Borra la tarea si es que hay una seleccionada
	*/
	private function deleteTask() : void
	{
		if (selectedTask != null)
		{
		 if(selectedTask.id != '')
		 {	
		 	  Alert.show('Are you sure you want to delete this task?','',mx.controls.Alert.OK | mx.controls.Alert.CANCEL, this, alertListener, null, Alert.OK);
		  }
		  else
		  {
		  	Alert.show("To delete first you have to select a task", "Error");
		  }
		} 
	}
	/*
	* Si confirmo la eliminacion de una tarea, se borra
	*/
	private function alertListener(event : CloseEvent) : void 
	{
		if (event.detail==Alert.OK) 
		{
			parentDocument.barChart.setTasksDeleted(selectedTask);
		}
	}
	/*
	* Limpia las cajas de texto de los link
	*/
	public function setTextLink() : void
	{
		//concatDependencies.label = '[add]';
		parentTask.label = '';
	}
	/*
	 * Limpia las cajas de texto 
	 */
	public function clearSelectedTask() : void
	{
		selectedTask.id = '';
		selectedTask.name = ''; 
		selectedTask.duration = 1; 
		selectedTask.completed = 0;
		selectedTask.duration = 0;
		selectedTask.isMilestone = false;
		selectedTask.lastModified = new User('');
		selectedTask.createdBy = new User('');
		setTextLink();
	}
	/*
	* Llane las cajas de texto con los datos de la tarea 
	*/
	public function loadSelectedTask() : void
	{
		Components.instance.tasks.select(Components.instance.tasks.selectedTask.id);//para que se actualize la variable selectTask
		selectedTask = Components.instance.tasks.selectedTask;
		setTextLink();
		if(selectedTask.dependencies.length > 0)
		{
		//	concatDependencies.label = selectedTask.concatDependencies(', ');
		}
		completed.enabled=parentDocument.taskList.editableCompleted(selectedTask);
		if(selectedTask.heriarchy!=null)
		{
			if(selectedTask.heriarchy.parent != null)
			{
				parentTask.label = selectedTask.heriarchy.parent.name;
			} else {
				parentTask.label = 'none';
			}
		}
		nameTask.text = selectedTask.name;
		duration.text = selectedTask.duration.toString();
		completed.text = selectedTask.completed.toString();

	}
	/*
	* Edita una tarea
	*/
	private function updateTask(type : String) : void
	{
		if(selectedTask != null){
			var taskTemp : Task = selectedTask.clone();
			if(taskTemp.id != '')
			{
				var text : String = '';
				switch (type)
				{
					case Constants.NAME:
						text = nameTask.text;
						break;
					case Constants.START_DATE:
						text = startDate.text;
						break;
					case Constants.END_DATE:
						text = endDate.text;
						break;
					case Constants.DURATION:
						text = duration.text;
						break;
					case Constants.COMPLETED:
						text = completed.text;
						break;
					case Constants.ISMILESTONE:
					/*
						if(isMilestone.selected)
						{
							text = '1';
						}
						else
						{
							text = '0';
						}
					*/
					break;
				}
				//if error update
				if(!Components.instance.tasks.setUpdateTask(taskTemp, type, text))
				{
					formTaskEdit.setFocus();
				}
				dispatchEvent(new Event(Constants.TASKS_FILTERS));
				dispatchEvent(new Event(Constants.TASK_SELECT));
				dispatchEvent(new Event(Constants.TASK_CENTER));
			}
		}
	}
	
	
	/*
	* Dispara evento para mostrar el panel de dependencias
	*/
	private function addDependencyEvent() : void
	{
		dispatchEvent(new Event(Constants.ADD_DEPENDENCY));
	}
	/*
	* Cambia la imagen que reprecenta al cursor del mouse
	*/
	private function setCursor(cursor : String):void
	{
		parentDocument.barChart.setCursor(cursor);
	}
	/*
	* Llamada cuando se preciona escape para que quede la tarea como estaba
	*/
	private function undoChange() : void
	{
		dispatchEvent(new Event(Constants.TASK_SELECT));
		formTaskEdit.setFocus();
	}
	
	/**
	* Array col that have the 1 to 100 ints	
	*/
	
    import mx.collections.ArrayCollection;

    [Bindable]
    public var percentCollection = new ArrayCollection();

 	public function fillPercentArray(): void 
 	{
 		if(percentCollection.length < 100){
 			percentCollection.removeAllChildren();
		     for (var i : int = 0;i < 101; i=i+5 ){	             	
	     			percentCollection.addItem({label:i+' %',data:i});	             	
	     		}				     	
     	}		     	
 	}
 	
 	/**
 	* Save task Changes
 	*/
 	
 	public function saveTaskChanges(){
 	
 		
 		if(selectedTask != null){
			var taskTemp : Task = selectedTask.clone();
			if(taskTemp.id != '')
			{
				if(validateForm()){
					trace('aaaaaaaaaaaaaaaaaaaaa'+ startDate.text);
					Components.instance.tasks.setUpdateTask(taskTemp, Constants.START_DATE, startDate.text.toString(),true);
					Components.instance.tasks.setUpdateTask(taskTemp, Constants.DURATION, duration.text.toString(),true);
					Components.instance.tasks.setUpdateTask(taskTemp, Constants.NAME,nameTask.text,true );
					Components.instance.tasks.setUpdateTask(taskTemp, Constants.END_DATE, endDate.text.toString(),true);
					
					
					
					Components.instance.tasks.setUpdateTask(taskTemp, Constants.COMPLETED, completed.value.toString(),true);
					Components.instance.tasks.setUpdateTask(taskTemp, Constants.PRIORITY, priority.value.toString(),true);		
									
					dispatchEvent(new Event(Constants.TASKS_FILTERS));
					dispatchEvent(new Event(Constants.TASK_SELECT));
					dispatchEvent(new Event(Constants.TASK_CENTER));
					
					trace('updating!');
					
					parentDocument.closeEditTaskOverlay();	

				} else {
					Alert.show('Please fill the required fields');
				}	
			}
 		}
 	}
 	
 	/**
 	* Validate required fields (that are not prefilled or have default values)
 	*/
 	private const intExpression:RegExp = /^\d+$/;

 	public function validateForm(){
 		if((nameTask.text == '') || (duration.text == '')){

 			if((nameTask.text == '')){ 
 				nameTask.setStyle('borderColor','red');
 			} else {
 				duration.setStyle('borderColor','red');
 			} 				
 			return false;
 		}
 		else if((duration.text != '')) 
 		{
 			if (intExpression.test(duration.text)) 
 			{
                duration.setStyle('borderColor','#CBCBCB');
                return true;
            } 
            else 
            {
            	duration.setStyle('borderColor','red');
            	return false; 
            }
 		}
 		
 		 else {
 			nameTask.setStyle('borderColor','#CBCBCB');
 			duration.setStyle('borderColor','#CBCBCB'); 			
 			return true;
 		}	
 	}
 	
 	/**
 	* Set today date with the salesforce look
 	*/
 	
 	public function setDateToday(field) : void 
 	{
 		 switch (field) 
 		 {
 		 	case 'start':
 		 		startDate.text = todayDateString;
 		 	break;
 		 	case 'end':
 		 		endDate.text = todayDateString;
 		 	break; 		 	
 		 }
 	}
 	
	]]>
</mx:Script>
<mx:Style source="css/EditTaskPanel.css"/>
<mx:Form id="formTaskEdit" 
	width="470" 
	height="100%" 
	y="0" 
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	x="0" styleName="form" keyDown="if(event.keyCode==27){undoChange();}">
	<mx:HBox width="100%" horizontalAlign="right" >
		<mx:Grid horizontalGap="2" verticalGap="0" verticalScrollPolicy="off" horizontalScrollPolicy="off">
			<mx:GridRow height="15" >
				<mx:GridItem width="4"  verticalAlign="middle">
					<mx:Image source="@Embed(source='imgs/required_block.png')"  />			
				</mx:GridItem>
				<mx:GridItem verticalAlign="middle">
					<mx:Label text=" = Required Information"  fontSize="10" color="#999999" paddingRight="10"/>			
				</mx:GridItem>
			</mx:GridRow>
		</mx:Grid>
	</mx:HBox>	
	<mx:FormItem id="formItemTaskName" width="100%" styleName="FormItem"  horizontalGap="0" indicatorGap="0">
		<mx:HBox>
			<mx:Label text="Task Name" height="20" width="90" styleName="labelFormItem"/>   
			<mx:Grid horizontalGap="2" verticalGap="0">
				<mx:GridRow >
					<mx:GridItem width="4">
						<mx:Image  source="@Embed(source='imgs/required_block.png')"   width="4" styleName="requiredBlockImg"/>			
					</mx:GridItem>
					<mx:GridItem width="293">
						<mx:TextInput id = "nameTask" height="20" width = "100%" text = "{selectedTask.name}" styleName="textInputFormItem" keyDown="if(event.keyCode == 13){formTaskEdit.setFocus();}"  focusThickness="1"/>			
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
		</mx:HBox>
	</mx:FormItem>
	<mx:FormItem id="formItemTaskPriority" width="470" styleName="FormItem"  horizontalGap="0" indicatorGap="0">
		<mx:HBox>
			<mx:Label text="Priority" height="20" width="90" styleName="labelFormItem"/>   
			<mx:Grid horizontalGap="2" verticalGap="0">
				<mx:GridRow >
					<mx:GridItem width="4">									
					</mx:GridItem>
					<mx:GridItem width="68" horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<mx:Script>
					        <![CDATA[
					            import mx.collections.ArrayCollection;
					
					            [Bindable]
					            public var priorityOpts:ArrayCollection = new ArrayCollection(
					                [  	{label:"High", data:"High"}, 
					                  	{label:"Normal", data:"Normal"}, 
					                  	{label:"Low", data:"Low"} ]);
					            
					            private function resetPrompt():void {
					            	//Alert.show('combo changed!');					            	
					            	priority.selectedIndex = -1;
					            }     
					        ]]>
					    </mx:Script>					
						<mx:ComboBox id="priority"  
							dataProvider="{priorityOpts}"
					 		text="{selectedTask.priority}"		
					 		width="64"	 
					 		color="#000000"
					 		height="20"
					 		selectionColor="0xFFFFFF"
					    	rollOverColor="0xF9F8CD"
					 		cornerRadius="0" 
					 		fontSize="10"
					 		focusRoundedCorners="0" 	
					 		downSkin="@Embed(source='imgs/drop_down_skin.png')" 
					 		skin="@Embed(source='imgs/drop_down_skin.png')"/>				
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
		</mx:HBox>
	</mx:FormItem>	
	<mx:FormItem id="formItemTaskStartDate" width="100%" styleName="FormItem"  horizontalGap="0" indicatorGap="0">
		<mx:HBox>
			<mx:Label text="Start Date" height="20"  width="90" styleName="labelFormItem"/>   
			<mx:Grid horizontalGap="2" verticalGap="0">
				<mx:GridRow >
					<mx:GridItem width="4">
						<mx:Image source="@Embed(source='imgs/required_block.png')"  />
					</mx:GridItem>
					<mx:GridItem width="100">
						<mx:DateField 
							enabled="{selectedTask.isEditable()}" 
							id = "startDate" height="20" 
							width = "100%" 
							text="{selectedTask.startDate.toString('mm/dd/yyyy')}"
			    			useHandCursor="true" buttonMode="true" 
			    			firstDayOfWeek = "1" 
			    			styleName="textInputFormItem" />			
					</mx:GridItem>
					<mx:GridItem>
						<mx:Grid horizontalGap="0" verticalGap="0">
							<mx:GridRow>
								<mx:GridItem width="5">
									<mx:Label text="["  paddingLeft="0" paddingRight="0"  />			
								</mx:GridItem>
								<mx:GridItem >
									<mx:Label text="{todayDateString}"
											textDecoration="underline" color="#666666"
											click="setDateToday('start');"
											useHandCursor="true" buttonMode="true" mouseChildren="false"											
											paddingLeft="0" paddingRight="0" />
								</mx:GridItem>
								<mx:GridItem  width="5">
									<mx:Label text="]"  paddingLeft="0" paddingRight="0"/>
								</mx:GridItem>
							</mx:GridRow>
						</mx:Grid>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>				
		</mx:HBox>
	</mx:FormItem>
	<mx:FormItem id="formItemTaskEndDate" width="100%" styleName="FormItem"  horizontalGap="0" indicatorGap="0">
		<mx:HBox>
			<mx:Label text="Due Date" height="20"  width="90" styleName="labelFormItem"/>
			<mx:Grid horizontalGap="2" verticalGap="0">
				<mx:GridRow >
					<mx:GridItem width="4">						
					</mx:GridItem>
					<mx:GridItem width="100">
						<mx:DateField enabled="false" id = "endDate" height="20" width = "100%" text="{selectedTask.endDate.toString('mm/dd/yyyy')}" 
			    			 useHandCursor="true" buttonMode="true" firstDayOfWeek = "1" styleName="textInputFormItem" />	
					</mx:GridItem>
					<mx:GridItem>
						<mx:Grid horizontalGap="0" verticalGap="0">
							<mx:GridRow>
								<mx:GridItem width="5">
									<mx:Label text="["  paddingLeft="0" paddingRight="0"  />			
								</mx:GridItem>
								<mx:GridItem >
									<mx:Label text="{todayDateString}"
											textDecoration="underline" color="#666666"
											click="setDateToday('end');"
											useHandCursor="true" buttonMode="true" mouseChildren="false"											
											paddingLeft="0" paddingRight="0"
										/>
								</mx:GridItem>
								<mx:GridItem  width="5">
									<mx:Label text="]"  paddingLeft="0" paddingRight="0"/>
								</mx:GridItem>
							</mx:GridRow>
						</mx:Grid>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
		</mx:HBox>
	</mx:FormItem>	
	<mx:FormItem id="formItemTaskDuration" width="100%" styleName="FormItem "  horizontalGap="0" indicatorGap="0">
		<mx:HBox>			
			<mx:Label text="Estimate" height="20"  width="90" styleName="labelFormItem"/>
			<mx:Grid horizontalGap="2" verticalGap="0">
				<mx:GridRow >
					<mx:GridItem width="4">
						<mx:Image styleName="topDateButtons" id="edit_button" source="@Embed(source='imgs/required_block.png')"  />
					</mx:GridItem>
					<mx:GridItem width="100" horizontalScrollPolicy="off" verticalScrollPolicy="off">
						<mx:TextInput 
								id = "duration" 
								height="20" 
								width = "100%" 
								text = "{selectedTask.duration}" 
								styleName="textInputFormItem" 
								keyDown="if(event.keyCode == 13){formTaskEdit.setFocus();}" />			
						<mx:Label height="20" width="50" text="days" />
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>					   
		</mx:HBox>
	</mx:FormItem>
	<mx:FormItem id="formItemTaskCompleted" width="100%" styleName="FormItem"  horizontalGap="0" indicatorGap="0">
		<mx:HBox horizontalScrollPolicy="off">
			<mx:Label text="Completed" height="20"  width="90" styleName="labelFormItem"/>
			<mx:Grid horizontalGap="2" verticalGap="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<mx:GridRow >
					<mx:GridItem width="4">						
					</mx:GridItem>
					<mx:GridItem width="100">
						<mx:ComboBox id="completed"  
							dataProvider="{percentCollection}"
					 		selectedIndex="{selectedTask.completed}" 					
					 		width="64"	 
					 		color="#000000"
					 		height="20"
					 		selectionColor="0xFFFFFF"
					    	rollOverColor="0xF9F8CD"
					 		cornerRadius="0" 
					 		focusRoundedCorners="0" 	
					 		downSkin="@Embed(source='imgs/drop_down_skin.png')" 
					 		skin="@Embed(source='imgs/drop_down_skin.png')"/>		 			
					</mx:GridItem>			
				</mx:GridRow>
			</mx:Grid>
		</mx:HBox>
	</mx:FormItem>	
	<mx:FormItem  id="formItemAssignee" width="100%" styleName="FormItem"  horizontalGap="0" indicatorGap="0">
		<mx:HBox>
			 <mx:Label text="Assign To" height="20"  width="90"  styleName="labelFormItem"/>		 	
		 	  <mx:Grid horizontalGap="2" verticalGap="0">
				<mx:GridRow>
					<mx:GridItem>
						  <mx:Label text="{selectedTask.taskResources[0]} ({selectedTask.taskResources[0].dedicated}%) "
						  	 height="25"  width="137"  color="#000000"/>
						  	 
					</mx:GridItem>
					<mx:GridItem  verticalAlign="middle" verticalCenter="true">
		 	  			<mx:Image id="addAssignee_icon" 
		 	  				source="@Embed(source='imgs/add_assignee_icon.png')"  
		 	  				useHandCursor="true" buttonMode="true" mouseChildren="false"
		 	  				click="parentDocument.showTabContent('asignees');"/>			
		 	  		</mx:GridItem>
		 	  		<mx:GridItem verticalAlign="middle" verticalCenter="true">
		 	  			<mx:Label
		 	  					text="Add Assignee" 
		 	  					height="20"  width="130"  
		 	  					textDecoration="underline"
		 	  					useHandCursor="true" buttonMode="true" mouseChildren="false"
		 	  					click="parentDocument.showTabContent('asignees');" />		 	  			
		 	  		</mx:GridItem>
		 	  	</mx:GridRow>
		 	  </mx:Grid>		 	  
		</mx:HBox>
	</mx:FormItem>	
	<mx:FormItem  id="formItemHierarchy" width="100%" styleName="FormItem"  horizontalGap="0" indicatorGap="0">
		<mx:HBox>
			 <mx:Label text="Parent" height="20"  width="90"  styleName="labelFormItem"/>
			   <mx:Grid horizontalGap="2" verticalGap="0">
					<mx:GridRow horizontalGap="2" verticalGap="0">
						<mx:GridItem>							
			 	 			<mx:LinkButton textDecoration="underline" alpha="0" textAlign="left" fontWeight="normal" height="17" width="100"	 id="parentTask"  color="#666666" paddingRight="0"/>
			 	 		</mx:GridItem>
			 	 		<mx:GridItem>
			 	 			<mx:Image source="@Embed(source='imgs/search_icon.png')"  />			
			 	 		</mx:GridItem>
			 	 	</mx:GridRow>
		 	 	</mx:Grid> 
		</mx:HBox>
	</mx:FormItem>	
	<!-- 
	Save and Cancel buttons
	-->
	<mx:FormItem width="100%" paddingLeft="0" paddingRight="0" paddingTop="0" horizontalAlign="left" horizontalGap="0" indicatorGap="0">
		<mx:Image source="@Embed(source='imgs/line_hr.png')"  />	
		<mx:HBox  horizontalAlign="center" width="100%" paddingTop="7">
			<mx:Grid verticalGap="5">
				<mx:GridRow>
					<mx:GridItem backgroundColor="0x7D8DA2" width="65" height="27" verticalAlign="middle" horizontalAlign="center">
						<mx:Label id="saveBtn" click="parentDocument.SaveTask()" useHandCursor="true"  buttonMode="true"  mouseChildren="false" text="Save" color="white"  fontWeight="bold" fontSize="12"  fontFamily="Arial"/>						
					</mx:GridItem>
					<mx:GridItem backgroundColor="0x999999"  width="55" height="27" verticalAlign="middle" horizontalAlign="center">
						<mx:Label id="cancelBtn" click="parentDocument.closeEditTaskOverlay();" useHandCursor="true" buttonMode="true"  mouseChildren="false"  text="Cancel" color="white" fontWeight="bold" fontSize="12"  fontFamily="Arial"/>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
		</mx:HBox>			
	</mx:FormItem> 
</mx:Form>
</mx:Panel>
